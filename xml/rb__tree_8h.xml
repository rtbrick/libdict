<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="rb__tree_8h" kind="file" language="C++">
    <compoundname>rb_tree.h</compoundname>
    <includes refid="dict_8h" local="yes">dict.h</includes>
    <includedby refid="dict_8h" local="yes">include/dict.h</includedby>
    <includedby refid="rb__tree_8c" local="yes">src/rb_tree.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/dict.c</label>
        <link refid="dict_8c"/>
      </node>
      <node id="19">
        <label>src/dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/hashtable.c</label>
        <link refid="hashtable_8c"/>
      </node>
      <node id="6">
        <label>src/hashtable2.c</label>
        <link refid="hashtable2_8c"/>
      </node>
      <node id="8">
        <label>src/hb_tree.c</label>
        <link refid="hb__tree_8c"/>
      </node>
      <node id="10">
        <label>src/pr_tree.c</label>
        <link refid="pr__tree_8c"/>
      </node>
      <node id="21">
        <label>src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
      </node>
      <node id="12">
        <label>src/skiplist.c</label>
        <link refid="skiplist_8c"/>
      </node>
      <node id="14">
        <label>src/sp_tree.c</label>
        <link refid="sp__tree_8c"/>
      </node>
      <node id="16">
        <label>src/tr_tree.c</label>
        <link refid="tr__tree_8c"/>
      </node>
      <node id="22">
        <label>src/tree_common.c</label>
        <link refid="tree__common_8c"/>
      </node>
      <node id="23">
        <label>src/tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wb_tree.c</label>
        <link refid="wb__tree_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rb__tree_8h_1af62be841b6f282162fad0a686ffd5e10" prot="public" static="no">
        <type>struct <ref refid="structrb__tree" kindref="compound">rb_tree</ref></type>
        <definition>typedef struct rb_tree rb_tree</definition>
        <argsstring></argsstring>
        <name>rb_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="35" column="22" bodyfile="include/rb_tree.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rb__tree_8h_1a6a5a46c909e90e300a9939a4aab5a4f4" prot="public" static="no">
        <type>struct <ref refid="structrb__itor" kindref="compound">rb_itor</ref></type>
        <definition>typedef struct rb_itor rb_itor</definition>
        <argsstring></argsstring>
        <name>rb_itor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="59" column="22" bodyfile="include/rb_tree.h" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="rb__tree_8h_1a185b47ec876c4da963ab7087500a1b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
        <definition>rb_tree * rb_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>rb_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="37" column="8" bodyfile="src/rb_tree.c" bodystart="113" bodyend="125" declfile="include/rb_tree.h" declline="37" declcolumn="8"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ad5f8e3d822b3e96bb421ee9eb90ab327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * rb_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>rb_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="38" column="5" bodyfile="src/rb_tree.c" bodystart="128" bodyend="139" declfile="include/rb_tree.h" declline="38" declcolumn="5"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" compoundref="rb__tree_8c" startline="113" endline="125">rb_tree_new</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a899a658f343e50449096281e805558c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_free</definition>
        <argsstring>(rb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>rb_tree_free</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="39" column="7" bodyfile="src/rb_tree.c" bodystart="142" bodyend="146" declfile="include/rb_tree.h" declline="39" declcolumn="7"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" compoundref="rb__tree_8c" startline="149" endline="171">rb_tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ab46bc504985390833fe0237386d8b8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result rb_tree_insert</definition>
        <argsstring>(rb_tree *tree, void *key)</argsstring>
        <name>rb_tree_insert</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="42" column="1" bodyfile="src/rb_tree.c" bodystart="180" bodyend="214" declfile="include/rb_tree.h" declline="42" declcolumn="1"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" compoundref="rb__tree_8c" startline="44">rb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
        <references refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" compoundref="rb__tree_8c" startline="54">SET_BLACK</references>
        <references refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" compoundref="rb__tree_8c" startline="55">SET_PARENT</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a3fc548a4253c2d36b8c3a651e043ca18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="43" column="5" bodyfile="src/rb_tree.c" bodystart="173" bodyend="173" declfile="include/rb_tree.h" declline="43" declcolumn="5"/>
        <references refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" compoundref="tree__common_8c" startline="144" endline="148">tree_search</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ab85b32b2d8a460a3e7d32405c6a2e282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_le</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_le</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="44" column="5" bodyfile="src/rb_tree.c" bodystart="174" bodyend="174" declfile="include/rb_tree.h" declline="44" declcolumn="5"/>
        <references refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" compoundref="tree__common_8c" startline="170" endline="174">tree_search_le</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a0395841d32563e097774d61db56196fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_lt</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_lt</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="45" column="5" bodyfile="src/rb_tree.c" bodystart="175" bodyend="175" declfile="include/rb_tree.h" declline="45" declcolumn="5"/>
        <references refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" compoundref="tree__common_8c" startline="194" endline="198">tree_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a2047044b2b501362e601b082238af365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_ge</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_ge</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="46" column="5" bodyfile="src/rb_tree.c" bodystart="176" bodyend="176" declfile="include/rb_tree.h" declline="46" declcolumn="5"/>
        <references refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" compoundref="tree__common_8c" startline="221" endline="225">tree_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1af4a398d3550bd9ce14ba56118cf678ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_gt</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_gt</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="47" column="5" bodyfile="src/rb_tree.c" bodystart="177" bodyend="177" declfile="include/rb_tree.h" declline="47" declcolumn="5"/>
        <references refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" compoundref="tree__common_8c" startline="245" endline="249">tree_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1adbb520715677367d143d29f4aa385adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result rb_tree_remove</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_remove</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="49" column="1" bodyfile="src/rb_tree.c" bodystart="297" bodyend="305" declfile="include/rb_tree.h" declline="49" declcolumn="1"/>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a4ad0f92a0a125ce3df88cc7ad4ececb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_clear</definition>
        <argsstring>(rb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>rb_tree_clear</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="50" column="7" bodyfile="src/rb_tree.c" bodystart="149" bodyend="171" declfile="include/rb_tree.h" declline="50" declcolumn="7"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" compoundref="rb__tree_8c" startline="50">PARENT</references>
        <references refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" compoundref="rb__tree_8c" startline="44">rb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a37dab4056fc3c5c0dd2ec82f16b83b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_traverse</definition>
        <argsstring>(rb_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>rb_tree_traverse</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="51" column="7" bodyfile="src/rb_tree.c" bodystart="388" bodyend="401" declfile="include/rb_tree.h" declline="51" declcolumn="7"/>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ade69cd881303ce0c2984862383788985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_tree_select</definition>
        <argsstring>(rb_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>rb_tree_select</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="52" column="5" bodyfile="src/rb_tree.c" bodystart="404" bodyend="429" declfile="include/rb_tree.h" declline="52" declcolumn="5"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1abb407a4fd41a281a47515f85d963c213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_count</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_count</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="53" column="7" bodyfile="src/rb_tree.c" bodystart="382" bodyend="382" declfile="include/rb_tree.h" declline="53" declcolumn="7"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="296" endline="299">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a07eb50c7b258fda3705f24d669bd3b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_min_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="54" column="7" bodyfile="src/rb_tree.c" bodystart="383" bodyend="383" declfile="include/rb_tree.h" declline="54" declcolumn="7"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="344" endline="348">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a4c4fe53f8606411bfbba72be208711a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_max_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="55" column="7" bodyfile="src/rb_tree.c" bodystart="384" bodyend="384" declfile="include/rb_tree.h" declline="55" declcolumn="7"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="359" endline="363">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a39beb3c1aff54da1098d4aff97172244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_total_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="56" column="7" bodyfile="src/rb_tree.c" bodystart="385" bodyend="385" declfile="include/rb_tree.h" declline="56" declcolumn="7"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="374" endline="378">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ab5f358cd3fc473153a486aa394367aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_tree_verify</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_verify</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="57" column="5" bodyfile="src/rb_tree.c" bodystart="549" bodyend="563" declfile="include/rb_tree.h" declline="57" declcolumn="5"/>
        <references refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" compoundref="rb__tree_8c" startline="51">COLOR</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" compoundref="rb__tree_8c" startline="48">RB_BLACK</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a5b8d3d3eb399c02c815d24bc1bc7cb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
        <definition>rb_itor * rb_itor_new</definition>
        <argsstring>(rb_tree *tree)</argsstring>
        <name>rb_itor_new</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="61" column="8" bodyfile="src/rb_tree.c" bodystart="566" bodyend="574" declfile="include/rb_tree.h" declline="61" declcolumn="8"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" compoundref="rb__tree_8c" startline="62">rb_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a2b40ed7b405e2b28271da7f26f04789b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * rb_dict_itor_new</definition>
        <argsstring>(rb_tree *tree)</argsstring>
        <name>rb_dict_itor_new</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="62" column="10" bodyfile="src/rb_tree.c" bodystart="577" bodyend="588" declfile="include/rb_tree.h" declline="62" declcolumn="10"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="174">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="175">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" compoundref="rb__tree_8c" startline="566" endline="574">rb_itor_new</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1ab87e5e22f1e91b8b4c4236eb3d11ef95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rb_itor_free</definition>
        <argsstring>(rb_itor *tree)</argsstring>
        <name>rb_itor_free</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="63" column="5" bodyfile="src/rb_tree.c" bodystart="590" bodyend="590" declfile="include/rb_tree.h" declline="63" declcolumn="5"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="393" endline="398">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a1eec6338f4eb24421b4556a65dd8937f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_valid</definition>
        <argsstring>(const rb_itor *itor)</argsstring>
        <name>rb_itor_valid</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="65" column="5" bodyfile="src/rb_tree.c" bodystart="591" bodyend="591" declfile="include/rb_tree.h" declline="65" declcolumn="5"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="381" endline="384">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a49c9c4d5489be20c7bbf27ea84df4755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rb_itor_invalidate</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_invalidate</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="66" column="5" bodyfile="src/rb_tree.c" bodystart="592" bodyend="592" declfile="include/rb_tree.h" declline="66" declcolumn="5"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="387" endline="390">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a1d0ba0959571c5479c902f3296d1c826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_next</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_next</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="67" column="5" bodyfile="src/rb_tree.c" bodystart="595" bodyend="600" declfile="include/rb_tree.h" declline="67" declcolumn="5"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a65d14c76c4aba97977bf130846942247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_prev</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_prev</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="68" column="5" bodyfile="src/rb_tree.c" bodystart="603" bodyend="608" declfile="include/rb_tree.h" declline="68" declcolumn="5"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a8bae4df64ac24e53ee234ac75d5a26ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_nextn</definition>
        <argsstring>(rb_itor *itor, size_t count)</argsstring>
        <name>rb_itor_nextn</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="69" column="5" bodyfile="src/rb_tree.c" bodystart="611" bodyend="617" declfile="include/rb_tree.h" declline="69" declcolumn="5"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" compoundref="rb__tree_8c" startline="595" endline="600">rb_itor_next</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a5fafb83419257dae777857066c165da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_prevn</definition>
        <argsstring>(rb_itor *itor, size_t count)</argsstring>
        <name>rb_itor_prevn</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="70" column="5" bodyfile="src/rb_tree.c" bodystart="620" bodyend="626" declfile="include/rb_tree.h" declline="70" declcolumn="5"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" compoundref="rb__tree_8c" startline="603" endline="608">rb_itor_prev</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a8461a547bf3168ff9f01081558457413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_first</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_first</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="71" column="5" bodyfile="src/rb_tree.c" bodystart="628" bodyend="628" declfile="include/rb_tree.h" declline="71" declcolumn="5"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="433" endline="437">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1aafcedf2a010d97489b219694c323c90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_last</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_last</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="72" column="5" bodyfile="src/rb_tree.c" bodystart="629" bodyend="629" declfile="include/rb_tree.h" declline="72" declcolumn="5"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="440" endline="444">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a659ce1ce60999d8d21ab172f7507d78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="73" column="5" bodyfile="src/rb_tree.c" bodystart="630" bodyend="630" declfile="include/rb_tree.h" declline="73" declcolumn="5"/>
        <references refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" compoundref="tree__common_8c" startline="447" endline="451">tree_iterator_search</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a490c25aed2c521b5996bf62d07d30bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_le</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_le</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="74" column="5" bodyfile="src/rb_tree.c" bodystart="631" bodyend="631" declfile="include/rb_tree.h" declline="74" declcolumn="5"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="454" endline="458">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a0dfa36745fc6fb3e154fd97ed920bec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_lt</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_lt</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="75" column="5" bodyfile="src/rb_tree.c" bodystart="632" bodyend="632" declfile="include/rb_tree.h" declline="75" declcolumn="5"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="461" endline="465">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a1181f9daa09876a74fe0e47048400f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_ge</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_ge</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="76" column="5" bodyfile="src/rb_tree.c" bodystart="633" bodyend="633" declfile="include/rb_tree.h" declline="76" declcolumn="5"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="468" endline="472">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1af2c10957d138378c35f5e3ab0c398f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_gt</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_gt</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="77" column="5" bodyfile="src/rb_tree.c" bodystart="634" bodyend="634" declfile="include/rb_tree.h" declline="77" declcolumn="5"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="475" endline="479">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a139503219f165edcacbb3b5eda9206c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * rb_itor_key</definition>
        <argsstring>(const rb_itor *itor)</argsstring>
        <name>rb_itor_key</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="78" column="11" bodyfile="src/rb_tree.c" bodystart="635" bodyend="635" declfile="include/rb_tree.h" declline="78" declcolumn="11"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="495" endline="499">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a8221a5aebd63a69b82f5665bc6e43fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_itor_datum</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_datum</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="79" column="5" bodyfile="src/rb_tree.c" bodystart="636" bodyend="636" declfile="include/rb_tree.h" declline="79" declcolumn="5"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="502" endline="506">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1afa0ed8443fddb747511d542689e9fd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rb_itor_compare</definition>
        <argsstring>(const rb_itor *i1, const rb_itor *i2)</argsstring>
        <name>rb_itor_compare</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="80" column="17" bodyfile="src/rb_tree.c" bodystart="637" bodyend="637" declfile="include/rb_tree.h" declline="80" declcolumn="17"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="482" endline="492">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8h_1a7c9ff3d03faccc6c844e9fab48f7192b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_remove</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_remove</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/rb_tree.h" line="81" column="5" bodyfile="src/rb_tree.c" bodystart="640" bodyend="647" declfile="include/rb_tree.h" declline="81" declcolumn="5"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" compoundref="rb__tree_8c" startline="62">rb_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>red-black<sp/>tree<sp/>interface.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBDICT_RB_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBDICT_RB_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="dict_8h_1a0c5f0f7b40e3b3df5aaa4c5e3c874b3b" kindref="member">BEGIN_DECL</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="rb__tree_8h_1af62be841b6f282162fad0a686ffd5e10" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__tree" kindref="compound">rb_tree</ref><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a185b47ec876c4da963ab7087500a1b99" kindref="member">rb_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structrb__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ad5f8e3d822b3e96bb421ee9eb90ab327" kindref="member">rb_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structrb__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a899a658f343e50449096281e805558c6" kindref="member">rb_tree_free</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ab46bc504985390833fe0237386d8b8c3" kindref="member">rb_tree_insert</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a3fc548a4253c2d36b8c3a651e043ca18" kindref="member">rb_tree_search</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ab85b32b2d8a460a3e7d32405c6a2e282" kindref="member">rb_tree_search_le</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a0395841d32563e097774d61db56196fc" kindref="member">rb_tree_search_lt</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a2047044b2b501362e601b082238af365" kindref="member">rb_tree_search_ge</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1af4a398d3550bd9ce14ba56118cf678ff" kindref="member">rb_tree_search_gt</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1adbb520715677367d143d29f4aa385adf" kindref="member">rb_tree_remove</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a4ad0f92a0a125ce3df88cc7ad4ececb1" kindref="member">rb_tree_clear</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a37dab4056fc3c5c0dd2ec82f16b83b8b" kindref="member">rb_tree_traverse</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ade69cd881303ce0c2984862383788985" kindref="member">rb_tree_select</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>datum);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1abb407a4fd41a281a47515f85d963c213" kindref="member">rb_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a07eb50c7b258fda3705f24d669bd3b20" kindref="member">rb_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a4c4fe53f8606411bfbba72be208711a0" kindref="member">rb_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a39beb3c1aff54da1098d4aff97172244" kindref="member">rb_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ab5f358cd3fc473153a486aa394367aa5" kindref="member">rb_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="rb__tree_8h_1a6a5a46c909e90e300a9939a4aab5a4f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__itor" kindref="compound">rb_itor</ref><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a5b8d3d3eb399c02c815d24bc1bc7cb35" kindref="member">rb_itor_new</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/><sp/><ref refid="rb__tree_8h_1a2b40ed7b405e2b28271da7f26f04789b" kindref="member">rb_dict_itor_new</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1ab87e5e22f1e91b8b4c4236eb3d11ef95" kindref="member">rb_itor_free</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a1eec6338f4eb24421b4556a65dd8937f" kindref="member">rb_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a49c9c4d5489be20c7bbf27ea84df4755" kindref="member">rb_itor_invalidate</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a1d0ba0959571c5479c902f3296d1c826" kindref="member">rb_itor_next</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a65d14c76c4aba97977bf130846942247" kindref="member">rb_itor_prev</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a8bae4df64ac24e53ee234ac75d5a26ec" kindref="member">rb_itor_nextn</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a5fafb83419257dae777857066c165da0" kindref="member">rb_itor_prevn</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a8461a547bf3168ff9f01081558457413" kindref="member">rb_itor_first</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1aafcedf2a010d97489b219694c323c90c" kindref="member">rb_itor_last</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a659ce1ce60999d8d21ab172f7507d78e" kindref="member">rb_itor_search</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a490c25aed2c521b5996bf62d07d30bd2" kindref="member">rb_itor_search_le</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a0dfa36745fc6fb3e154fd97ed920bec5" kindref="member">rb_itor_search_lt</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a1181f9daa09876a74fe0e47048400f2a" kindref="member">rb_itor_search_ge</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1af2c10957d138378c35f5e3ab0c398f40" kindref="member">rb_itor_search_gt</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="rb__tree_8h_1a139503219f165edcacbb3b5eda9206c5" kindref="member">rb_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a8221a5aebd63a69b82f5665bc6e43fce" kindref="member">rb_itor_datum</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1afa0ed8443fddb747511d542689e9fd78" kindref="member">rb_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>i2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8h_1a7c9ff3d03faccc6c844e9fab48f7192b" kindref="member">rb_itor_remove</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="dict_8h_1acca589e3adebef8ed4e5bed6dea40ebb" kindref="member">END_DECL</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!LIBDICT_RB_TREE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/rb_tree.h"/>
  </compounddef>
</doxygen>
