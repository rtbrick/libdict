<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="sp__tree_8c" kind="file" language="C++">
    <compoundname>sp_tree.c</compoundname>
    <includes refid="sp__tree_8h" local="yes">sp_tree.h</includes>
    <includes refid="dict__private_8h" local="yes">dict_private.h</includes>
    <includes refid="tree__common_8h" local="yes">tree_common.h</includes>
    <incdepgraph>
      <node id="3">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/sp_tree.c</label>
        <link refid="sp__tree_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="16">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structsp__node" prot="public">sp_node</innerclass>
    <innerclass refid="structsp__tree" prot="public">sp_tree</innerclass>
    <innerclass refid="structsp__itor" prot="public">sp_itor</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sp__tree_8c_1a5691ea6af6c9773f1eb9605b269a2152" prot="public" static="no">
        <type>struct <ref refid="structsp__node" kindref="compound">sp_node</ref></type>
        <definition>typedef struct sp_node sp_node</definition>
        <argsstring></argsstring>
        <name>sp_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="53" column="22" bodyfile="src/sp_tree.c" bodystart="53" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="sp__tree_8c_1ad795fbc5baab8f0ae486b2da1a3cfb32" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structdict__vtable" kindref="compound">dict_vtable</ref></type>
        <definition>const dict_vtable sp_tree_vtable</definition>
        <argsstring></argsstring>
        <name>sp_tree_vtable</name>
        <initializer>= {
    true,
    (<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)        <ref refid="sp__tree_8c_1a7ffd78dd7a34ea39753d59a14b033e14" kindref="member">sp_dict_itor_new</ref>,
    (<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)       <ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>,
    (<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)      <ref refid="sp__tree_8c_1a3b1d829d912c8ab320e8110716875950" kindref="member">sp_tree_insert</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="sp__tree_8c_1afd16f76bbf820d14eb3db168136a37fc" kindref="member">sp_tree_search</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="sp__tree_8c_1ab8ff652fdbe0c8bc7051aecea0fb913c" kindref="member">sp_tree_search_le</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="sp__tree_8c_1a7ff93c1e46debc8e8673646fd2d94942" kindref="member">sp_tree_search_lt</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="sp__tree_8c_1afa19a9136268d240d92f2af9e1a14565" kindref="member">sp_tree_search_ge</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="sp__tree_8c_1aa87418e18b3f9985fb5bc51a2a8edb4d" kindref="member">sp_tree_search_gt</ref>,
    (<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)      <ref refid="sp__tree_8c_1a1206d24633b21c18dc28d808a3e9b0aa" kindref="member">sp_tree_remove</ref>,
    (<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)       <ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>,
    (<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)    <ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>,
    (<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)      <ref refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" kindref="member">tree_select</ref>,
    (<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)       <ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,
    (<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)      <ref refid="sp__tree_8c_1abff88ebfaaba6159ca254c41c5f2e128" kindref="member">sp_tree_verify</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="66" column="26" bodyfile="src/sp_tree.c" bodystart="66" bodyend="82"/>
      </memberdef>
      <memberdef kind="variable" id="sp__tree_8c_1a349c18e6c13d1d9e9b6a8c8246d809ac" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structitor__vtable" kindref="compound">itor_vtable</ref></type>
        <definition>const itor_vtable sp_tree_itor_vtable</definition>
        <argsstring></argsstring>
        <name>sp_tree_itor_vtable</name>
        <initializer>= {
    (<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)       <ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>,
    (<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)       <ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>,
    (<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)  <ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>,
    (<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)        <ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>,
    (<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)        <ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>,
    (<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)       <ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>,
    (<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)       <ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>,
    (<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)       <ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>,
    (<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)        <ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>,
    (<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)         <ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>,
    (<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)       <ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="sp__tree_8c_1afe58f8a23aa49ecf39a86410326df325" kindref="member">sp_itor_search</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>,
    (<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)     <ref refid="sp__tree_8c_1a6c721a662275fd9a821086f581dff7ec" kindref="member">sp_itor_remove</ref>,
    (<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)    <ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="84" column="26" bodyfile="src/sp_tree.c" bodystart="84" bodyend="103"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sp__tree_8c_1a9b6cac6415d06381b3e353d672cc6c0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsp__node" kindref="compound">sp_node</ref> *</type>
        <definition>static sp_node * node_new</definition>
        <argsstring>(void *key)</argsstring>
        <name>node_new</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="393" column="1" bodyfile="src/sp_tree.c" bodystart="393" bodyend="404" declfile="src/sp_tree.c" declline="105" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a1e511ff4ef27a489167b9836e4425bb9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void splay</definition>
        <argsstring>(sp_tree *t, sp_node *n)</argsstring>
        <name>splay</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structsp__node" kindref="compound">sp_node</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="141" column="1" bodyfile="src/sp_tree.c" bodystart="141" bodyend="241" declfile="src/sp_tree.c" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
        <definition>sp_tree * sp_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>sp_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="109" column="1" bodyfile="src/sp_tree.c" bodystart="109" bodyend="121"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a0dd09f97386e0811f5cc7c7bb8c49cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * sp_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>sp_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="124" column="1" bodyfile="src/sp_tree.c" bodystart="124" bodyend="135"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" compoundref="sp__tree_8c" startline="109" endline="121">sp_tree_new</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a815f781f80f8976dac11e4c158d3dd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_free</definition>
        <argsstring>(sp_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>sp_tree_free</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="137" column="8" bodyfile="src/sp_tree.c" bodystart="137" bodyend="137"/>
        <references refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" compoundref="tree__common_8c" startline="328" endline="333">tree_free</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a3c9f2eef13a5203b55d0145a1af71499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_clear</definition>
        <argsstring>(sp_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>sp_tree_clear</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="138" column="8" bodyfile="src/sp_tree.c" bodystart="138" bodyend="138"/>
        <references refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" compoundref="tree__common_8c" startline="302" endline="325">tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a3b1d829d912c8ab320e8110716875950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result sp_tree_insert</definition>
        <argsstring>(sp_tree *tree, void *key)</argsstring>
        <name>sp_tree_insert</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="244" column="1" bodyfile="src/sp_tree.c" bodystart="244" bodyend="277"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="sp__tree_8c" startline="55">sp_node::key</references>
        <references refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" compoundref="sp__tree_8c" startline="55">sp_node::llink</references>
        <references refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" compoundref="sp__tree_8c" startline="55">sp_node::parent</references>
        <references refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" compoundref="sp__tree_8c" startline="55">sp_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1afd16f76bbf820d14eb3db168136a37fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="280" column="1" bodyfile="src/sp_tree.c" bodystart="280" bodyend="299"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1ab8ff652fdbe0c8bc7051aecea0fb913c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_le</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_le</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="302" column="1" bodyfile="src/sp_tree.c" bodystart="302" bodyend="311"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a7ff93c1e46debc8e8673646fd2d94942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_lt</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_lt</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="314" column="1" bodyfile="src/sp_tree.c" bodystart="314" bodyend="323"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1afa19a9136268d240d92f2af9e1a14565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_ge</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_ge</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="326" column="1" bodyfile="src/sp_tree.c" bodystart="326" bodyend="335"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1aa87418e18b3f9985fb5bc51a2a8edb4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_gt</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_gt</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="338" column="1" bodyfile="src/sp_tree.c" bodystart="338" bodyend="347"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a8107f29519f2cc8acea1d39378736965" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void remove_node</definition>
        <argsstring>(sp_tree *tree, sp_node *node)</argsstring>
        <name>remove_node</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structsp__node" kindref="compound">sp_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="350" column="1" bodyfile="src/sp_tree.c" bodystart="350" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a1206d24633b21c18dc28d808a3e9b0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result sp_tree_remove</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_remove</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="375" column="1" bodyfile="src/sp_tree.c" bodystart="375" bodyend="383"/>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="sp__tree_8c" startline="55">sp_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a8608422da7970ca2fec353ec1417b33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_traverse</definition>
        <argsstring>(sp_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>sp_tree_traverse</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="385" column="8" bodyfile="src/sp_tree.c" bodystart="385" bodyend="385"/>
        <references refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" compoundref="tree__common_8c" startline="252" endline="268">tree_traverse</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a4b360505e324551364c92d556fb9bebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_tree_select</definition>
        <argsstring>(sp_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>sp_tree_select</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="386" column="6" bodyfile="src/sp_tree.c" bodystart="386" bodyend="386"/>
        <references refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" compoundref="tree__common_8c" startline="271" endline="293">tree_select</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a9ff35e577690ce12ab6e963f5f939ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_count</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_count</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="387" column="8" bodyfile="src/sp_tree.c" bodystart="387" bodyend="387"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="296" endline="299">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a4d72fa3b29ac89d45d898ecf7e4dac8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_min_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="388" column="8" bodyfile="src/sp_tree.c" bodystart="388" bodyend="388"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="344" endline="348">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a7f612182b8d25714fd43dd70a264d132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_max_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="389" column="8" bodyfile="src/sp_tree.c" bodystart="389" bodyend="389"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="359" endline="363">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1aeaad2a79cf2f5811d22d9027c881c0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_total_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="390" column="8" bodyfile="src/sp_tree.c" bodystart="390" bodyend="390"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="374" endline="378">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a513d5dcda30a02504aed361205686a14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool node_verify</definition>
        <argsstring>(const sp_tree *tree, const sp_node *parent, const sp_node *node)</argsstring>
        <name>node_verify</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const <ref refid="structsp__node" kindref="compound">sp_node</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="structsp__node" kindref="compound">sp_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="407" column="1" bodyfile="src/sp_tree.c" bodystart="407" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1abff88ebfaaba6159ca254c41c5f2e128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_tree_verify</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_verify</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="432" column="1" bodyfile="src/sp_tree.c" bodystart="432" bodyend="440"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
        <definition>sp_itor * sp_itor_new</definition>
        <argsstring>(sp_tree *tree)</argsstring>
        <name>sp_itor_new</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="443" column="1" bodyfile="src/sp_tree.c" bodystart="443" bodyend="451"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" compoundref="sp__tree_8c" startline="63">sp_itor::node</references>
        <references refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" compoundref="sp__tree_8c" startline="63">sp_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a7ffd78dd7a34ea39753d59a14b033e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * sp_dict_itor_new</definition>
        <argsstring>(sp_tree *tree)</argsstring>
        <name>sp_dict_itor_new</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="454" column="1" bodyfile="src/sp_tree.c" bodystart="454" bodyend="465"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="175">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="176">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" compoundref="sp__tree_8c" startline="443" endline="451">sp_itor_new</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a4149e8d78168dc0e2d225944d7d2f672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sp_itor_free</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_free</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="467" column="6" bodyfile="src/sp_tree.c" bodystart="467" bodyend="467"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="393" endline="398">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1ab9c244698889f3b8d3a9c4fce90e1060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_valid</definition>
        <argsstring>(const sp_itor *itor)</argsstring>
        <name>sp_itor_valid</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="468" column="6" bodyfile="src/sp_tree.c" bodystart="468" bodyend="468"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="381" endline="384">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a9d080146ed7720bfa237111611caa970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sp_itor_invalidate</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_invalidate</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="469" column="6" bodyfile="src/sp_tree.c" bodystart="469" bodyend="469"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="387" endline="390">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a5ec031c6c4bf789b0391bce36c664dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_next</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_next</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="470" column="6" bodyfile="src/sp_tree.c" bodystart="470" bodyend="470"/>
        <references refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" compoundref="tree__common_8c" startline="401" endline="409">tree_iterator_next</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a37c497903825a793f867122b21efcd10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_prev</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_prev</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="471" column="6" bodyfile="src/sp_tree.c" bodystart="471" bodyend="471"/>
        <references refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" compoundref="tree__common_8c" startline="412" endline="420">tree_iterator_prev</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a126590bec2cfe018ac71f3a404d2dc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_nextn</definition>
        <argsstring>(sp_itor *itor, size_t count)</argsstring>
        <name>sp_itor_nextn</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="472" column="6" bodyfile="src/sp_tree.c" bodystart="472" bodyend="472"/>
        <references refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" compoundref="tree__common_8c" startline="423" endline="429">tree_iterator_nextn</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a7446bad5cb5cf66b7631f54021aad7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_prevn</definition>
        <argsstring>(sp_itor *itor, size_t count)</argsstring>
        <name>sp_itor_prevn</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="473" column="6" bodyfile="src/sp_tree.c" bodystart="473" bodyend="473"/>
        <references refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" compoundref="tree__common_8c" startline="432" endline="438">tree_iterator_prevn</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1adfc0d6dba087898b99b833dff64cd75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_first</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_first</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="474" column="6" bodyfile="src/sp_tree.c" bodystart="474" bodyend="474"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="441" endline="445">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a0bbc8dfb29420c2213b8a87dc38ed7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_last</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_last</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="475" column="6" bodyfile="src/sp_tree.c" bodystart="475" bodyend="475"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="448" endline="452">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1afe58f8a23aa49ecf39a86410326df325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="477" column="6" bodyfile="src/sp_tree.c" bodystart="477" bodyend="477"/>
        <references refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" compoundref="tree__common_8c" startline="455" endline="459">tree_iterator_search</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1abfa097e41a164e857fff94b297acdb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_le</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_le</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="478" column="6" bodyfile="src/sp_tree.c" bodystart="478" bodyend="478"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="462" endline="466">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1aeab0a5071187a441852424630c4e179d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_lt</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_lt</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="479" column="6" bodyfile="src/sp_tree.c" bodystart="479" bodyend="479"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="469" endline="473">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a255ff56e31d60736be987136e6f5bb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_ge</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_ge</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="480" column="6" bodyfile="src/sp_tree.c" bodystart="480" bodyend="480"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="476" endline="480">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1af2a87f0226e009a956acf683427d62f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_gt</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_gt</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="481" column="6" bodyfile="src/sp_tree.c" bodystart="481" bodyend="481"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="483" endline="487">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1aed4ab0ae8ace94de5cb022ddd747441a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * sp_itor_key</definition>
        <argsstring>(const sp_itor *itor)</argsstring>
        <name>sp_itor_key</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="482" column="12" bodyfile="src/sp_tree.c" bodystart="482" bodyend="482"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="503" endline="507">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a124014a5870761a1e8e795bfe77386a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_itor_datum</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_datum</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="483" column="6" bodyfile="src/sp_tree.c" bodystart="483" bodyend="483"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="510" endline="514">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a69177491372a2140181640ac0158333a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sp_itor_compare</definition>
        <argsstring>(const sp_itor *i1, const sp_itor *i2)</argsstring>
        <name>sp_itor_compare</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="486" column="1" bodyfile="src/sp_tree.c" bodystart="486" bodyend="489"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="490" endline="500">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8c_1a6c721a662275fd9a821086f581dff7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_remove</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_remove</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sp_tree.c" line="492" column="1" bodyfile="src/sp_tree.c" bodystart="492" bodyend="499"/>
        <references refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" compoundref="sp__tree_8c" startline="63">sp_itor::node</references>
        <references refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" compoundref="sp__tree_8c" startline="63">sp_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>splay<sp/>tree<sp/>implementation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>cf.<sp/>[Sleator<sp/>and<sp/>Tarjan,<sp/>1985],<sp/>[Tarjan<sp/>1985],<sp/>[Tarjan<sp/>1983]</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>A<sp/>single<sp/>operation<sp/>on<sp/>a<sp/>splay<sp/>tree<sp/>has<sp/>a<sp/>worst-case<sp/>time<sp/>complexity<sp/>of<sp/>O(N),</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>but<sp/>a<sp/>series<sp/>of<sp/>M<sp/>operations<sp/>have<sp/>a<sp/>time<sp/>complexity<sp/>of<sp/>O(M<sp/>lg<sp/>N),<sp/>and<sp/>thus</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>the<sp/>amortized<sp/>time<sp/>complexity<sp/>of<sp/>an<sp/>operation<sp/>is<sp/>O(lg<sp/>N).<sp/>More<sp/>specifically,</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>a<sp/>series<sp/>of<sp/>M<sp/>operations<sp/>on<sp/>a<sp/>tree<sp/>with<sp/>N<sp/>nodes<sp/>will<sp/>runs<sp/>in<sp/>O((N+M)lg(N+M))</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>time.<sp/>Splay<sp/>trees<sp/>work<sp/>by<sp/>&quot;splaying&quot;<sp/>a<sp/>node<sp/>up<sp/>the<sp/>tree<sp/>using<sp/>a<sp/>series<sp/>of</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>rotations<sp/>until<sp/>it<sp/>is<sp/>the<sp/>root<sp/>each<sp/>time<sp/>it<sp/>is<sp/>accessed.<sp/>They<sp/>are<sp/>much</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>simpler<sp/>to<sp/>code<sp/>than<sp/>most<sp/>balanced<sp/>trees,<sp/>because<sp/>there<sp/>is<sp/>no<sp/>strict</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>requirement<sp/>about<sp/>maintaining<sp/>a<sp/>balance<sp/>scheme<sp/>among<sp/>nodes.<sp/>When<sp/>inserting</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>and<sp/>searching,<sp/>we<sp/>simply<sp/>splay<sp/>the<sp/>node<sp/>in<sp/>question<sp/>up<sp/>until<sp/>it<sp/>becomes<sp/>the</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>root<sp/>of<sp/>the<sp/>tree.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>This<sp/>implementation<sp/>is<sp/>a<sp/>bottom-up,<sp/>move-to-root<sp/>splay<sp/>tree.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>rather<sp/>than<sp/>splay<sp/>after<sp/>the<sp/>fact,<sp/>use<sp/>the<sp/>splay<sp/>operation<sp/>to<sp/>traverse</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>the<sp/>tree<sp/>during<sp/>insert,<sp/>search,<sp/>delete,<sp/>etc.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sp__tree_8h" kindref="compound">sp_tree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__private_8h" kindref="compound">dict_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tree__common_8h" kindref="compound">tree_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="sp__tree_8c_1a5691ea6af6c9773f1eb9605b269a2152" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__node" kindref="compound">sp_node</ref><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>;</highlight></codeline>
<codeline lineno="54" refid="structsp__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__node" kindref="compound">sp_node</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" kindref="member">TREE_NODE_FIELDS</ref>(<ref refid="structsp__node" kindref="compound">sp_node</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structsp__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__tree" kindref="compound">sp_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="59" refid="structsp__tree_1a3e0944ca8a425fcd254ca5057e885e45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" kindref="member">TREE_FIELDS</ref>(<ref refid="structsp__node" kindref="compound">sp_node</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structsp__itor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__itor" kindref="compound">sp_itor</ref><sp/>{</highlight></codeline>
<codeline lineno="63" refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" kindref="member">TREE_ITERATOR_FIELDS</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>,<sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdict__vtable" kindref="compound">dict_vtable</ref><sp/>sp_tree_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1a7ffd78dd7a34ea39753d59a14b033e14" kindref="member">sp_dict_itor_new</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1a3b1d829d912c8ab320e8110716875950" kindref="member">sp_tree_insert</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1afd16f76bbf820d14eb3db168136a37fc" kindref="member">sp_tree_search</ref>,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1ab8ff652fdbe0c8bc7051aecea0fb913c" kindref="member">sp_tree_search_le</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1a7ff93c1e46debc8e8673646fd2d94942" kindref="member">sp_tree_search_lt</ref>,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1afa19a9136268d240d92f2af9e1a14565" kindref="member">sp_tree_search_ge</ref>,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1aa87418e18b3f9985fb5bc51a2a8edb4d" kindref="member">sp_tree_search_gt</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1a1206d24633b21c18dc28d808a3e9b0aa" kindref="member">sp_tree_remove</ref>,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)<sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" kindref="member">tree_select</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1abff88ebfaaba6159ca254c41c5f2e128" kindref="member">sp_tree_verify</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structitor__vtable" kindref="compound">itor_vtable</ref><sp/>sp_tree_itor_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)<sp/><sp/><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1afe58f8a23aa49ecf39a86410326df325" kindref="member">sp_itor_search</ref>,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8c_1a6c721a662275fd9a821086f581dff7ec" kindref="member">sp_itor_remove</ref>,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)<sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>splay(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/>t,<sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>n);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*</highlight></codeline>
<codeline lineno="109" refid="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" kindref="member">sp_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(cmp_func<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structtree" kindref="compound">tree</ref>));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref><sp/>=<sp/>cmp_func;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*</highlight></codeline>
<codeline lineno="124" refid="sp__tree_8c_1a0dd09f97386e0811f5cc7c7bb8c49cd4" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a0dd09f97386e0811f5cc7c7bb8c49cd4" kindref="member">sp_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict" kindref="compound">dict</ref>*<sp/>dct<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dct));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dct)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dct-&gt;<ref refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" kindref="member">_object</ref><sp/>=<sp/><ref refid="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" kindref="member">sp_tree_new</ref>(cmp_func)))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(dct);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dct-&gt;<ref refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" kindref="member">_vtable</ref><sp/>=<sp/>&amp;sp_tree_vtable;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dct;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="sp__tree_8c_1a815f781f80f8976dac11e4c158d3dd28" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a815f781f80f8976dac11e4c158d3dd28" kindref="member">sp_tree_free</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>delete_func);<sp/>}</highlight></codeline>
<codeline lineno="138" refid="sp__tree_8c_1a3c9f2eef13a5203b55d0145a1af71499" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a3c9f2eef13a5203b55d0145a1af71499" kindref="member">sp_tree_clear</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>delete_func);<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">splay(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/>t,<sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>n)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>p<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>pp<sp/>=<sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pp)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Parent<sp/>is<sp/>the<sp/>root;<sp/>simply<sp/>rotate<sp/>root<sp/>left<sp/>or<sp/>right<sp/>so<sp/>that<sp/>|n|</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>becomes<sp/>new<sp/>root.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rotations;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structsp__tree_1a9a5eb031d6bc27af198939b6bd9b858e" kindref="member">root</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>ppp<sp/>=<sp/>pp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>parent<sp/>right,<sp/>then<sp/>node<sp/>right.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pr<sp/>=<sp/>p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pp-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>pr)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nr<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>nr)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>node<sp/>right,<sp/>then<sp/>parent<sp/>left.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nr<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>nr)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nl<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pp-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>nl)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pp-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>==<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>parent<sp/>left,<sp/>then<sp/>node<sp/>left.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pl<sp/>=<sp/>p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pp-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>pl)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pl-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nl<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>nl)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>node<sp/>left,<sp/>then<sp/>parent<sp/>right.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nl<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((p-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>nl)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nl-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nr<sp/>=<sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pp-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>nr)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>pp;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>ppp;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ppp)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ppp-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>pp)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppp-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppp-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structsp__tree_1a9a5eb031d6bc27af198939b6bd9b858e" kindref="member">root</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structsp__tree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>+=<sp/>rotations;</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="244" refid="sp__tree_8c_1a3b1d829d912c8ab320e8110716875950" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a3b1d829d912c8ab320e8110716875950" kindref="member">sp_tree_insert</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(node<sp/>=<sp/>node_new(key)))</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(node-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>parent))<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="280" refid="sp__tree_8c_1afd16f76bbf820d14eb3db168136a37fc" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1afd16f76bbf820d14eb3db168136a37fc" kindref="member">sp_tree_search</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;<sp/>node;)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;key);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;llink;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;rlink;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node-&gt;datum;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="302" refid="sp__tree_8c_1ab8ff652fdbe0c8bc7051aecea0fb913c" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1ab8ff652fdbe0c8bc7051aecea0fb913c" kindref="member">sp_tree_search_le</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" kindref="member">tree_search_le_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="314" refid="sp__tree_8c_1a7ff93c1e46debc8e8673646fd2d94942" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a7ff93c1e46debc8e8673646fd2d94942" kindref="member">sp_tree_search_lt</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" kindref="member">tree_search_lt_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="326" refid="sp__tree_8c_1afa19a9136268d240d92f2af9e1a14565" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1afa19a9136268d240d92f2af9e1a14565" kindref="member">sp_tree_search_ge</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" kindref="member">tree_search_ge_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="338" refid="sp__tree_8c_1aa87418e18b3f9985fb5bc51a2a8edb4d" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1aa87418e18b3f9985fb5bc51a2a8edb4d" kindref="member">sp_tree_search_gt</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" kindref="member">tree_search_gt_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">remove_node(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>out;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>||<sp/>!node-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(node-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tmp;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>out-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>out-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>out-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>?<sp/>out-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>:<sp/>out-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/>out-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(out);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>out<sp/>?<sp/>&amp;parent-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>splay(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>--;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="375" refid="sp__tree_8c_1a1206d24633b21c18dc28d808a3e9b0aa" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a1206d24633b21c18dc28d808a3e9b0aa" kindref="member">sp_tree_remove</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref>)<sp/>{<sp/>NULL,<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref><sp/>result<sp/>=<sp/>{<sp/>node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="sp__tree_8c_1a8608422da7970ca2fec353ec1417b33b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a8608422da7970ca2fec353ec1417b33b" kindref="member">sp_tree_traverse</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>visit,<sp/>user_data);<sp/>}</highlight></codeline>
<codeline lineno="386" refid="sp__tree_8c_1a4b360505e324551364c92d556fb9bebb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a4b360505e324551364c92d556fb9bebb" kindref="member">sp_tree_select</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>datum)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" kindref="member">tree_select</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>n,<sp/>key,<sp/>datum);<sp/>}</highlight></codeline>
<codeline lineno="387" refid="sp__tree_8c_1a9ff35e577690ce12ab6e963f5f939ea6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a9ff35e577690ce12ab6e963f5f939ea6" kindref="member">sp_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="388" refid="sp__tree_8c_1a4d72fa3b29ac89d45d898ecf7e4dac8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a4d72fa3b29ac89d45d898ecf7e4dac8f" kindref="member">sp_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" kindref="member">tree_min_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="389" refid="sp__tree_8c_1a7f612182b8d25714fd43dd70a264d132" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a7f612182b8d25714fd43dd70a264d132" kindref="member">sp_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" kindref="member">tree_max_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="390" refid="sp__tree_8c_1aeaad2a79cf2f5811d22d9027c881c0f8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1aeaad2a79cf2f5811d22d9027c881c0f8" kindref="member">sp_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" kindref="member">tree_total_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*</highlight></codeline>
<codeline lineno="393"><highlight class="normal">node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*node));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">node_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__node" kindref="compound">sp_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="408"><highlight class="normal">{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(parent-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>node<sp/>||<sp/>parent-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(node-&gt;<ref refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" kindref="member">parent</ref><sp/>==<sp/>parent);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(parent-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>node-&gt;<ref refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" kindref="member">llink</ref>)<sp/>||</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>node-&gt;<ref refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" kindref="member">rlink</ref>))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="sp__tree_8c_1abff88ebfaaba6159ca254c41c5f2e128" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1abff88ebfaaba6159ca254c41c5f2e128" kindref="member">sp_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>NULL,<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*</highlight></codeline>
<codeline lineno="443" refid="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" kindref="member">sp_itor_new</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" kindref="member">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*</highlight></codeline>
<codeline lineno="454" refid="sp__tree_8c_1a7ffd78dd7a34ea39753d59a14b033e14" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a7ffd78dd7a34ea39753d59a14b033e14" kindref="member">sp_dict_itor_new</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(itor-&gt;<ref refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" kindref="member">_itor</ref><sp/>=<sp/><ref refid="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" kindref="member">sp_itor_new</ref>(<ref refid="structtree" kindref="compound">tree</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(itor);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" kindref="member">_vtable</ref><sp/>=<sp/>&amp;sp_tree_itor_vtable;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="sp__tree_8c_1a4149e8d78168dc0e2d225944d7d2f672" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a4149e8d78168dc0e2d225944d7d2f672" kindref="member">sp_itor_free</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="468" refid="sp__tree_8c_1ab9c244698889f3b8d3a9c4fce90e1060" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1ab9c244698889f3b8d3a9c4fce90e1060" kindref="member">sp_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="469" refid="sp__tree_8c_1a9d080146ed7720bfa237111611caa970" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a9d080146ed7720bfa237111611caa970" kindref="member">sp_itor_invalidate</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="470" refid="sp__tree_8c_1a5ec031c6c4bf789b0391bce36c664dc3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a5ec031c6c4bf789b0391bce36c664dc3" kindref="member">sp_itor_next</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="471" refid="sp__tree_8c_1a37c497903825a793f867122b21efcd10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a37c497903825a793f867122b21efcd10" kindref="member">sp_itor_prev</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="472" refid="sp__tree_8c_1a126590bec2cfe018ac71f3a404d2dc75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a126590bec2cfe018ac71f3a404d2dc75" kindref="member">sp_itor_nextn</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>(itor,<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="473" refid="sp__tree_8c_1a7446bad5cb5cf66b7631f54021aad7b3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a7446bad5cb5cf66b7631f54021aad7b3" kindref="member">sp_itor_prevn</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>(itor,<sp/>count);<sp/>}</highlight></codeline>
<codeline lineno="474" refid="sp__tree_8c_1adfc0d6dba087898b99b833dff64cd75f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1adfc0d6dba087898b99b833dff64cd75f" kindref="member">sp_itor_first</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="475" refid="sp__tree_8c_1a0bbc8dfb29420c2213b8a87dc38ed7fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a0bbc8dfb29420c2213b8a87dc38ed7fb" kindref="member">sp_itor_last</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>TODO:<sp/>use<sp/>algorithm<sp/>from<sp/>sp_tree_search()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477" refid="sp__tree_8c_1afe58f8a23aa49ecf39a86410326df325" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1afe58f8a23aa49ecf39a86410326df325" kindref="member">sp_itor_search</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="478" refid="sp__tree_8c_1abfa097e41a164e857fff94b297acdb68" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1abfa097e41a164e857fff94b297acdb68" kindref="member">sp_itor_search_le</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="479" refid="sp__tree_8c_1aeab0a5071187a441852424630c4e179d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1aeab0a5071187a441852424630c4e179d" kindref="member">sp_itor_search_lt</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="480" refid="sp__tree_8c_1a255ff56e31d60736be987136e6f5bb90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1a255ff56e31d60736be987136e6f5bb90" kindref="member">sp_itor_search_ge</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="481" refid="sp__tree_8c_1af2a87f0226e009a956acf683427d62f1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sp__tree_8c_1af2a87f0226e009a956acf683427d62f1" kindref="member">sp_itor_search_gt</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="482" refid="sp__tree_8c_1aed4ab0ae8ace94de5cb022ddd747441a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sp__tree_8c_1aed4ab0ae8ace94de5cb022ddd747441a" kindref="member">sp_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="483" refid="sp__tree_8c_1a124014a5870761a1e8e795bfe77386a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="sp__tree_8c_1a124014a5870761a1e8e795bfe77386a4" kindref="member">sp_itor_datum</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="sp__tree_8c_1a69177491372a2140181640ac0158333a" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a69177491372a2140181640ac0158333a" kindref="member">sp_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>i2)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>(i1,<sp/>i2);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="sp__tree_8c_1a6c721a662275fd9a821086f581dff7ec" refkind="member"><highlight class="normal"><ref refid="sp__tree_8c_1a6c721a662275fd9a821086f581dff7ec" kindref="member">sp_itor_remove</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itor-&gt;<ref refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(itor-&gt;<ref refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" kindref="member">tree</ref>,<sp/>itor-&gt;<ref refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/sp_tree.c"/>
  </compounddef>
</doxygen>
