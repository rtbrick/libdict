<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="tree__common_8c" kind="file" language="C++">
    <compoundname>tree_common.c</compoundname>
    <includes refid="tree__common_8h" local="yes">tree_common.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="dict__private_8h" local="yes">dict_private.h</includes>
    <incdepgraph>
      <node id="3">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tree_common.c</label>
        <link refid="tree__common_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="18">
        <label>stdio.h</label>
      </node>
      <node id="19">
        <label>stdlib.h</label>
      </node>
      <node id="16">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtree__node" prot="public">tree_node</innerclass>
    <innerclass refid="structtree" prot="public">tree</innerclass>
    <innerclass refid="structtree__iterator" prot="public">tree_iterator</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tree__common_8c_1a6dae47dcd4d115ec4657410802efb75b" prot="public" static="no">
        <type>struct <ref refid="structtree__node" kindref="compound">tree_node</ref></type>
        <definition>typedef struct tree_node tree_node</definition>
        <argsstring></argsstring>
        <name>tree_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="35" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="tree__common_8c_1a364dcfa88f9f8e27d1e0ffa7ae7cd15d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_node_rot_left</definition>
        <argsstring>(void *Tree, void *Node)</argsstring>
        <name>tree_node_rot_left</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="46" column="1" bodyfile="src/tree_common.c" bodystart="46" bodyend="59"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1ad79fac7e5a30bf71ac8a7d53c56cf176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_node_rot_right</definition>
        <argsstring>(void *Tree, void *Node)</argsstring>
        <name>tree_node_rot_right</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="62" column="1" bodyfile="src/tree_common.c" bodystart="62" bodyend="75"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_prev</definition>
        <argsstring>(void *Node)</argsstring>
        <name>tree_node_prev</name>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="78" column="1" bodyfile="src/tree_common.c" bodystart="78" bodyend="89"/>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_next</definition>
        <argsstring>(void *Node)</argsstring>
        <name>tree_node_next</name>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="92" column="1" bodyfile="src/tree_common.c" bodystart="92" bodyend="103"/>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_min</definition>
        <argsstring>(void *Node)</argsstring>
        <name>tree_node_min</name>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="106" column="1" bodyfile="src/tree_common.c" bodystart="106" bodyend="114"/>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_max</definition>
        <argsstring>(void *Node)</argsstring>
        <name>tree_node_max</name>
        <param>
          <type>void *</type>
          <declname>Node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="117" column="1" bodyfile="src/tree_common.c" bodystart="117" bodyend="125"/>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_node</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_node</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="128" column="1" bodyfile="src/tree_common.c" bodystart="128" bodyend="141"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="144" column="1" bodyfile="src/tree_common.c" bodystart="144" bodyend="148"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_le_node</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_le_node</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="151" column="1" bodyfile="src/tree_common.c" bodystart="151" bodyend="167"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_le</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_le</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="170" column="1" bodyfile="src/tree_common.c" bodystart="170" bodyend="174"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_lt_node</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_lt_node</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="177" column="1" bodyfile="src/tree_common.c" bodystart="177" bodyend="191"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_lt</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_lt</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="194" column="1" bodyfile="src/tree_common.c" bodystart="194" bodyend="198"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_ge_node</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_ge_node</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="201" column="1" bodyfile="src/tree_common.c" bodystart="201" bodyend="218"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_ge</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_ge</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="221" column="1" bodyfile="src/tree_common.c" bodystart="221" bodyend="225"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_gt_node</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_gt_node</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="228" column="1" bodyfile="src/tree_common.c" bodystart="228" bodyend="242"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_gt</definition>
        <argsstring>(void *Tree, const void *key)</argsstring>
        <name>tree_search_gt</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="245" column="1" bodyfile="src/tree_common.c" bodystart="245" bodyend="249"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_traverse</definition>
        <argsstring>(void *Tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>tree_traverse</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="252" column="1" bodyfile="src/tree_common.c" bodystart="252" bodyend="268"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_select</definition>
        <argsstring>(void *Tree, size_t n, const void **key, void **datum)</argsstring>
        <name>tree_select</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="271" column="1" bodyfile="src/tree_common.c" bodystart="271" bodyend="293"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a666279f96572685934714532e744718e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_count</definition>
        <argsstring>(const void *Tree)</argsstring>
        <name>tree_count</name>
        <param>
          <type>const void *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="296" column="1" bodyfile="src/tree_common.c" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_clear</definition>
        <argsstring>(void *Tree, dict_delete_func delete_func)</argsstring>
        <name>tree_clear</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="302" column="1" bodyfile="src/tree_common.c" bodystart="302" bodyend="325"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_free</definition>
        <argsstring>(void *Tree, dict_delete_func delete_func)</argsstring>
        <name>tree_free</name>
        <param>
          <type>void *</type>
          <declname>Tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="328" column="1" bodyfile="src/tree_common.c" bodystart="328" bodyend="333"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" compoundref="tree__common_8c" startline="302" endline="325">tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a8e2e1b5f17965b7ba5f0d4aaad4e8d61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t node_min_path_length</definition>
        <argsstring>(const tree_node *node)</argsstring>
        <name>node_min_path_length</name>
        <param>
          <type>const <ref refid="structtree__node" kindref="compound">tree_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="336" column="1" bodyfile="src/tree_common.c" bodystart="336" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_min_path_length</definition>
        <argsstring>(const void *Tree)</argsstring>
        <name>tree_min_path_length</name>
        <param>
          <type>const void *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="344" column="1" bodyfile="src/tree_common.c" bodystart="344" bodyend="348"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a2487033dc4dfd907eebc9ea0ab7b189b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t node_max_path_length</definition>
        <argsstring>(const tree_node *node)</argsstring>
        <name>node_max_path_length</name>
        <param>
          <type>const <ref refid="structtree__node" kindref="compound">tree_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="351" column="1" bodyfile="src/tree_common.c" bodystart="351" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_max_path_length</definition>
        <argsstring>(const void *Tree)</argsstring>
        <name>tree_max_path_length</name>
        <param>
          <type>const void *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="359" column="1" bodyfile="src/tree_common.c" bodystart="359" bodyend="363"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a9166dc2c17617953104f5ca83fe1f943" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t node_path_length</definition>
        <argsstring>(const tree_node *node, size_t level)</argsstring>
        <name>node_path_length</name>
        <param>
          <type>const <ref refid="structtree__node" kindref="compound">tree_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="366" column="1" bodyfile="src/tree_common.c" bodystart="366" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_total_path_length</definition>
        <argsstring>(const void *Tree)</argsstring>
        <name>tree_total_path_length</name>
        <param>
          <type>const void *</type>
          <declname>Tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="374" column="1" bodyfile="src/tree_common.c" bodystart="374" bodyend="378"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_valid</definition>
        <argsstring>(const void *Iterator)</argsstring>
        <name>tree_iterator_valid</name>
        <param>
          <type>const void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="381" column="1" bodyfile="src/tree_common.c" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_iterator_invalidate</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_invalidate</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="387" column="1" bodyfile="src/tree_common.c" bodystart="387" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_iterator_free</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_free</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="393" column="1" bodyfile="src/tree_common.c" bodystart="393" bodyend="398"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_next</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_next</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="401" column="1" bodyfile="src/tree_common.c" bodystart="401" bodyend="409"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_prev</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_prev</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="412" column="1" bodyfile="src/tree_common.c" bodystart="412" bodyend="420"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_nextn</definition>
        <argsstring>(void *Iterator, size_t count)</argsstring>
        <name>tree_iterator_nextn</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="423" column="1" bodyfile="src/tree_common.c" bodystart="423" bodyend="429"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_prevn</definition>
        <argsstring>(void *Iterator, size_t count)</argsstring>
        <name>tree_iterator_prevn</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="432" column="1" bodyfile="src/tree_common.c" bodystart="432" bodyend="438"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_first</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_first</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="441" column="1" bodyfile="src/tree_common.c" bodystart="441" bodyend="445"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_last</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_last</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="448" column="1" bodyfile="src/tree_common.c" bodystart="448" bodyend="452"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search</definition>
        <argsstring>(void *Iterator, const void *key)</argsstring>
        <name>tree_iterator_search</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="455" column="1" bodyfile="src/tree_common.c" bodystart="455" bodyend="459"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a630ac71696ac60548789b01f1e618350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_le</definition>
        <argsstring>(void *Iterator, const void *key)</argsstring>
        <name>tree_iterator_search_le</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="462" column="1" bodyfile="src/tree_common.c" bodystart="462" bodyend="466"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1aa83954869eda27b3488032f96a257771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_lt</definition>
        <argsstring>(void *Iterator, const void *key)</argsstring>
        <name>tree_iterator_search_lt</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="469" column="1" bodyfile="src/tree_common.c" bodystart="469" bodyend="473"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_ge</definition>
        <argsstring>(void *Iterator, const void *key)</argsstring>
        <name>tree_iterator_search_ge</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="476" column="1" bodyfile="src/tree_common.c" bodystart="476" bodyend="480"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_gt</definition>
        <argsstring>(void *Iterator, const void *key)</argsstring>
        <name>tree_iterator_search_gt</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="483" column="1" bodyfile="src/tree_common.c" bodystart="483" bodyend="487"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tree_iterator_compare</definition>
        <argsstring>(const void *Iterator1, const void *Iterator2)</argsstring>
        <name>tree_iterator_compare</name>
        <param>
          <type>const void *</type>
          <declname>Iterator1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Iterator2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="490" column="1" bodyfile="src/tree_common.c" bodystart="490" bodyend="500"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * tree_iterator_key</definition>
        <argsstring>(const void *Iterator)</argsstring>
        <name>tree_iterator_key</name>
        <param>
          <type>const void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="503" column="1" bodyfile="src/tree_common.c" bodystart="503" bodyend="507"/>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_iterator_datum</definition>
        <argsstring>(void *Iterator)</argsstring>
        <name>tree_iterator_datum</name>
        <param>
          <type>void *</type>
          <declname>Iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.c" line="510" column="1" bodyfile="src/tree_common.c" bodystart="510" bodyend="514"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>-<sp/>common<sp/>definitions<sp/>for<sp/>binary<sp/>search<sp/>trees.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tree__common_8h" kindref="compound">tree_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__private_8h" kindref="compound">dict_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structtree__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree__node" kindref="compound">tree_node</ref><sp/>{</highlight></codeline>
<codeline lineno="34" refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" kindref="member">TREE_NODE_FIELDS</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>);</highlight></codeline>
<codeline lineno="35" refid="tree__common_8c_1a6dae47dcd4d115ec4657410802efb75b" refkind="member"><highlight class="normal">}<sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structtree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38" refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" kindref="member">TREE_FIELDS</ref>(<ref refid="structtree__node" kindref="compound">tree_node</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}<sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structtree__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42" refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" kindref="member">TREE_ITERATOR_FIELDS</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="tree__common_8c_1a364dcfa88f9f8e27d1e0ffa7ae7cd15d" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a364dcfa88f9f8e27d1e0ffa7ae7cd15d" kindref="member">tree_node_rot_left</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nr<sp/>=<sp/>n-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(nr<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref><sp/>=<sp/>nr-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>nr-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>p<sp/>=<sp/>n-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>nr;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>nr-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>*(p<sp/>==<sp/>NULL<sp/>?<sp/>&amp;((<ref refid="structtree" kindref="compound">tree</ref>*)Tree)-&gt;root<sp/>:<sp/>p-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>==<sp/>n<sp/>?<sp/>&amp;p-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>:<sp/>&amp;p-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>=<sp/>nr;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="tree__common_8c_1ad79fac7e5a30bf71ac8a7d53c56cf176" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1ad79fac7e5a30bf71ac8a7d53c56cf176" kindref="member">tree_node_rot_right</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nl<sp/>=<sp/>n-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(nl<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((n-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>=<sp/>nl-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>nl-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref><sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>n-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>n-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>nl;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>nl-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>*(p<sp/>==<sp/>NULL<sp/>?<sp/>&amp;((<ref refid="structtree" kindref="compound">tree</ref>*)Tree)-&gt;root<sp/>:<sp/>p-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>==<sp/>n<sp/>?<sp/>&amp;p-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>:<sp/>&amp;p-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>=<sp/>nl;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="78" refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" kindref="member">tree_node_prev</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parent<sp/>&amp;&amp;<sp/>parent-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>parent-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="92" refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" kindref="member">tree_node_next</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parent<sp/>&amp;&amp;<sp/>parent-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>parent-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="106" refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="117" refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Node)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>Node;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="128" refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;<sp/>node;)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>t-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;key);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;llink;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;rlink;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="144" refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(Tree,<sp/>key);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="151" refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" kindref="member">tree_search_le_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>*ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>t-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="170" refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" kindref="member">tree_search_le_node</ref>(Tree,<sp/>key);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="177" refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" kindref="member">tree_search_lt_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>*ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>t-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="194" refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" kindref="member">tree_search_lt_node</ref>(Tree,<sp/>key);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="201" refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" kindref="member">tree_search_ge_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>*ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>t-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="221" refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" kindref="member">tree_search_ge_node</ref>(Tree,<sp/>key);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="228" refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" kindref="member">tree_search_gt_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>*ret<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>t-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="245" refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" kindref="member">tree_search_gt_node</ref>(Tree,<sp/>key);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node<sp/>?<sp/>&amp;node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(visit<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visit(node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>user_data))</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" kindref="member">tree_node_next</ref>(node);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" kindref="member">tree_select</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Tree,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**datum)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>t-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/>t-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>/<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>t-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>-<sp/>1<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" kindref="member">tree_node_prev</ref>(node);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" kindref="member">tree_node_next</ref>(node);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="tree__common_8c_1a666279f96572685934714532e744718e" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>*)Tree)-&gt;count;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>t-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node<sp/>=<sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>||<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>?<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>:<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_func)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete_func(node-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(node);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>t-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>(Tree,<sp/>delete_func);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(Tree);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal">node_min_path_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>?<sp/>node_min_path_length(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref><sp/>?<sp/>node_min_path_length(node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/><ref refid="dict__private_8h_1a3acffbd305ee72dcd4593c0d8af64a4f" kindref="member">MIN</ref>(l,<sp/>r);</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" kindref="member">tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree)</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>?<sp/>node_min_path_length(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">node_max_path_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>?<sp/>node_max_path_length(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref><sp/>?<sp/>node_max_path_length(node-&gt;<ref refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" kindref="member">rlink</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/><ref refid="dict__private_8h_1afa99ec4acc4ecb2dc3c2d05da15d0e3f" kindref="member">MAX</ref>(l,<sp/>r);</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" kindref="member">tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>?<sp/>node_max_path_length(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">node_path_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__node" kindref="compound">tree_node</ref>*<sp/>node,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>level)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref><sp/>?<sp/>node_path_length(node-&gt;<ref refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" kindref="member">llink</ref>,<sp/>level<sp/>+<sp/>1)<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>+<sp/>(node-&gt;rlink<sp/>?<sp/>node_path_length(node-&gt;rlink,<sp/>level<sp/>+<sp/>1)<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" kindref="member">tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Tree)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>*<sp/>t<sp/>=<sp/>Tree;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>?<sp/>node_path_length(t-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>1)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*)Iterator)-&gt;node<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>((<ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*)Iterator)-&gt;node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(iterator);</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" kindref="member">tree_node_next</ref>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" kindref="member">tree_node_prev</ref>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>&amp;&amp;<sp/>count--)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" kindref="member">tree_node_next</ref>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>&amp;&amp;<sp/>count--)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" kindref="member">tree_node_prev</ref>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>,<sp/>key))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" kindref="member">tree_search_le_node</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>,<sp/>key))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" kindref="member">tree_search_lt_node</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>,<sp/>key))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" kindref="member">tree_search_ge_node</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>,<sp/>key))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>=<sp/><ref refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" kindref="member">tree_search_gt_node</ref>(iterator-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>,<sp/>key))<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator2)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>itor1<sp/>=<sp/>Iterator1;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>itor2<sp/>=<sp/>Iterator2;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(itor1-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref><sp/>==<sp/>itor2-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itor1-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!itor2-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>?<sp/>0<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itor2-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor1-&gt;<ref refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" kindref="member">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(itor1-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>itor2-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="503" refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>?<sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>-&gt;<ref refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight></codeline>
<codeline lineno="510" refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" refkind="member"><highlight class="normal"><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Iterator)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree__iterator" kindref="compound">tree_iterator</ref>*<sp/>iterator<sp/>=<sp/>Iterator;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref><sp/>?<sp/>&amp;iterator-&gt;<ref refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" kindref="member">node</ref>-&gt;<ref refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/tree_common.c"/>
  </compounddef>
</doxygen>
