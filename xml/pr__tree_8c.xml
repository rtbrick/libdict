<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="pr__tree_8c" kind="file" language="C++">
    <compoundname>pr_tree.c</compoundname>
    <includes refid="pr__tree_8h" local="yes">pr_tree.h</includes>
    <includes refid="dict__private_8h" local="yes">dict_private.h</includes>
    <includes refid="tree__common_8h" local="yes">tree_common.h</includes>
    <incdepgraph>
      <node id="3">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/pr_tree.c</label>
        <link refid="pr__tree_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="16">
        <label>stdio.h</label>
      </node>
      <node id="17">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structpr__node" prot="public">pr_node</innerclass>
    <innerclass refid="structpr__tree" prot="public">pr_tree</innerclass>
    <innerclass refid="structpr__itor" prot="public">pr_itor</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" prot="public" static="no">
        <name>WEIGHT</name>
        <param><defname>n</defname></param>
        <initializer>((n) ? (n)-&gt;weight : 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="43" column="9" bodyfile="src/pr_tree.c" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pr__tree_8c_1a9c99a7afdc595f4bf162db44d8375630" prot="public" static="no">
        <type>struct <ref refid="structpr__node" kindref="compound">pr_node</ref></type>
        <definition>typedef struct pr_node pr_node</definition>
        <argsstring></argsstring>
        <name>pr_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="37" column="22" bodyfile="src/pr_tree.c" bodystart="37" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="pr__tree_8c_1ae0e5307ac933d9aece1ae4e1ffd4eb9d" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structdict__vtable" kindref="compound">dict_vtable</ref></type>
        <definition>const dict_vtable pr_tree_vtable</definition>
        <argsstring></argsstring>
        <name>pr_tree_vtable</name>
        <initializer>= {
    true,
    (<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)	    <ref refid="pr__tree_8c_1a34060218131e6e94fea3533d268f03a9" kindref="member">pr_dict_itor_new</ref>,
    (<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)	    <ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>,
    (<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)	    <ref refid="pr__tree_8c_1a369aef27d756b0dc5e36f9937aac3290" kindref="member">pr_tree_insert</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)	    <ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)	    <ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)	    <ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)	    <ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)	    <ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>,
    (<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)	    <ref refid="pr__tree_8c_1a5439bea0d35397810101842ae9556056" kindref="member">pr_tree_remove</ref>,
    (<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)	    <ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>,
    (<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)    <ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>,
    (<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)	    <ref refid="pr__tree_8c_1a7397755dbec281006bd3baf25f62f1de" kindref="member">pr_tree_select</ref>,
    (<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)	    <ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,
    (<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)	    <ref refid="pr__tree_8c_1ae3a3c1c743cb2c3fdfbaac2befcf3c5e" kindref="member">pr_tree_verify</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="53" column="26" bodyfile="src/pr_tree.c" bodystart="53" bodyend="69"/>
      </memberdef>
      <memberdef kind="variable" id="pr__tree_8c_1add77cbb0895aeea08742c4894f2d9da6" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structitor__vtable" kindref="compound">itor_vtable</ref></type>
        <definition>const itor_vtable pr_tree_itor_vtable</definition>
        <argsstring></argsstring>
        <name>pr_tree_itor_vtable</name>
        <initializer>= {
    (<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)	    <ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>,
    (<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)	    <ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>,
    (<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)  <ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>,
    (<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)	    <ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>,
    (<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)	    <ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>,
    (<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)	    <ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>,
    (<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)	    <ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>,
    (<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)	    <ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>,
    (<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)	    <ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>,
    (<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)	    <ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>,
    (<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)	    <ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)	    <ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)	    <ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)	    <ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)	    <ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)	    <ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>,
    (<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)	    <ref refid="pr__tree_8c_1a4ad0eb725ec5114887f4c351b53fa320" kindref="member">pr_itor_remove</ref>,
    (<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)    <ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="71" column="26" bodyfile="src/pr_tree.c" bodystart="71" bodyend="90"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="pr__tree_8c_1a9ef53aba3623a85774d1060a6c585136" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned fixup</definition>
        <argsstring>(pr_tree *tree, pr_node *node)</argsstring>
        <name>fixup</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="134" column="1" bodyfile="src/pr_tree.c" bodystart="134" bodyend="249" declfile="src/pr_tree.c" declline="92" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a1db5a6e5246dadf594eb5a148d3011e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rot_left</definition>
        <argsstring>(pr_tree *tree, pr_node *node)</argsstring>
        <name>rot_left</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="408" column="1" bodyfile="src/pr_tree.c" bodystart="408" bodyend="417" declfile="src/pr_tree.c" declline="93" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a048ff32d213c4691e45aee8f0f959b30" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rot_right</definition>
        <argsstring>(pr_tree *tree, pr_node *node)</argsstring>
        <name>rot_right</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="432" column="1" bodyfile="src/pr_tree.c" bodystart="432" bodyend="441" declfile="src/pr_tree.c" declline="94" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a740e870b5773ff1f9579d23b24ddd282" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
        <definition>static pr_node * node_new</definition>
        <argsstring>(void *key)</argsstring>
        <name>node_new</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="381" column="1" bodyfile="src/pr_tree.c" bodystart="381" bodyend="393" declfile="src/pr_tree.c" declline="95" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a021d6c481cd2bf3e59d1e2d2ab869428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
        <definition>pr_tree * pr_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>pr_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="98" column="1" bodyfile="src/pr_tree.c" bodystart="98" bodyend="110"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a0f4e72cc520d3c11b84ac04989148352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * pr_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>pr_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="113" column="1" bodyfile="src/pr_tree.c" bodystart="113" bodyend="124"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="pr__tree_8c_1a021d6c481cd2bf3e59d1e2d2ab869428" compoundref="pr__tree_8c" startline="98" endline="110">pr_tree_new</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1aa4a6bb903a1760fced365e1804c14b8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_free</definition>
        <argsstring>(pr_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>pr_tree_free</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="126" column="8" bodyfile="src/pr_tree.c" bodystart="126" bodyend="126"/>
        <references refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" compoundref="tree__common_8c" startline="328" endline="333">tree_free</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1af03a9d82a232ad95cab29fe57da099ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_tree_search</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_search</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="127" column="6" bodyfile="src/pr_tree.c" bodystart="127" bodyend="127"/>
        <references refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" compoundref="tree__common_8c" startline="144" endline="148">tree_search</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1acc5e721a419ab0385d680fcf6876546c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_tree_search_le</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_search_le</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="128" column="6" bodyfile="src/pr_tree.c" bodystart="128" bodyend="128"/>
        <references refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" compoundref="tree__common_8c" startline="170" endline="174">tree_search_le</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a19abec2733a7ea9caa29f1d22e7b850c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_tree_search_lt</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_search_lt</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="129" column="6" bodyfile="src/pr_tree.c" bodystart="129" bodyend="129"/>
        <references refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" compoundref="tree__common_8c" startline="194" endline="198">tree_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a66085cf58e260d862ce8fe4fbfe31df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_tree_search_ge</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_search_ge</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="130" column="6" bodyfile="src/pr_tree.c" bodystart="130" bodyend="130"/>
        <references refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" compoundref="tree__common_8c" startline="221" endline="225">tree_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a13aac3c296260214168e0702ad88095b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_tree_search_gt</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_search_gt</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="131" column="6" bodyfile="src/pr_tree.c" bodystart="131" bodyend="131"/>
        <references refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" compoundref="tree__common_8c" startline="245" endline="249">tree_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a369aef27d756b0dc5e36f9937aac3290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result pr_tree_insert</definition>
        <argsstring>(pr_tree *tree, void *key)</argsstring>
        <name>pr_tree_insert</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="252" column="1" bodyfile="src/pr_tree.c" bodystart="252" bodyend="290"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="pr__tree_8c" startline="39">pr_node::datum</references>
        <references refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="pr__tree_8c" startline="39">pr_node::key</references>
        <references refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" compoundref="pr__tree_8c" startline="39">pr_node::llink</references>
        <references refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" compoundref="pr__tree_8c" startline="39">pr_node::parent</references>
        <references refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" compoundref="pr__tree_8c" startline="39">pr_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
        <references refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" compoundref="pr__tree_8c" startline="40">pr_node::weight</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a1123071e725e93eb9cfd711c78a3f77c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void remove_node</definition>
        <argsstring>(pr_tree *tree, pr_node *node)</argsstring>
        <name>remove_node</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="293" column="1" bodyfile="src/pr_tree.c" bodystart="293" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a5439bea0d35397810101842ae9556056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result pr_tree_remove</definition>
        <argsstring>(pr_tree *tree, const void *key)</argsstring>
        <name>pr_tree_remove</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="328" column="1" bodyfile="src/pr_tree.c" bodystart="328" bodyend="336"/>
        <references refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="pr__tree_8c" startline="39">pr_node::datum</references>
        <references refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="pr__tree_8c" startline="39">pr_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a9339232ae391d0e7f673fa275733555c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_clear</definition>
        <argsstring>(pr_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>pr_tree_clear</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="338" column="8" bodyfile="src/pr_tree.c" bodystart="338" bodyend="338"/>
        <references refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" compoundref="tree__common_8c" startline="302" endline="325">tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a37f8889c7ddffaf5820ff824b9b798e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_traverse</definition>
        <argsstring>(pr_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>pr_tree_traverse</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="341" column="1" bodyfile="src/pr_tree.c" bodystart="341" bodyend="344"/>
        <references refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" compoundref="tree__common_8c" startline="252" endline="268">tree_traverse</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a7397755dbec281006bd3baf25f62f1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_tree_select</definition>
        <argsstring>(pr_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>pr_tree_select</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="347" column="1" bodyfile="src/pr_tree.c" bodystart="347" bodyend="373"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="pr__tree_8c" startline="39">pr_node::datum</references>
        <references refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="pr__tree_8c" startline="39">pr_node::key</references>
        <references refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" compoundref="pr__tree_8c" startline="39">pr_node::llink</references>
        <references refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" compoundref="pr__tree_8c" startline="39">pr_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" compoundref="pr__tree_8c" startline="43">WEIGHT</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1ad01559bb0016db3d55d99756d959479d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_count</definition>
        <argsstring>(const pr_tree *tree)</argsstring>
        <name>pr_tree_count</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="375" column="8" bodyfile="src/pr_tree.c" bodystart="375" bodyend="375"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="296" endline="299">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a0a8f3a4bfb2749b87517fa08971ca3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_max_path_length</definition>
        <argsstring>(const pr_tree *tree)</argsstring>
        <name>pr_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="376" column="8" bodyfile="src/pr_tree.c" bodystart="376" bodyend="376"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="359" endline="363">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a813fe6b4373aebdf8d7eeeb8f022afd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_min_path_length</definition>
        <argsstring>(const pr_tree *tree)</argsstring>
        <name>pr_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="377" column="8" bodyfile="src/pr_tree.c" bodystart="377" bodyend="377"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="344" endline="348">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1acdf0fc6fc9b122418083888333b7ccda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pr_tree_total_path_length</definition>
        <argsstring>(const pr_tree *tree)</argsstring>
        <name>pr_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="378" column="8" bodyfile="src/pr_tree.c" bodystart="378" bodyend="378"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="374" endline="378">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a8fef683caa65c32f1b6662ef8a2d6cd1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool node_verify</definition>
        <argsstring>(const pr_tree *tree, const pr_node *parent, const pr_node *node)</argsstring>
        <name>node_verify</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const <ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="structpr__node" kindref="compound">pr_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="444" column="1" bodyfile="src/pr_tree.c" bodystart="444" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1ae3a3c1c743cb2c3fdfbaac2befcf3c5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_tree_verify</definition>
        <argsstring>(const pr_tree *tree)</argsstring>
        <name>pr_tree_verify</name>
        <param>
          <type>const <ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="481" column="1" bodyfile="src/pr_tree.c" bodystart="481" bodyend="489"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1ae8398f448c6c0c7555d38840cba7bb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
        <definition>pr_itor * pr_itor_new</definition>
        <argsstring>(pr_tree *tree)</argsstring>
        <name>pr_itor_new</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="492" column="1" bodyfile="src/pr_tree.c" bodystart="492" bodyend="500"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" compoundref="pr__tree_8c" startline="50">pr_itor::node</references>
        <references refid="structpr__itor_1a0e42d341d4cb4d8aa99bd66d8a5877dd" compoundref="pr__tree_8c" startline="50">pr_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a34060218131e6e94fea3533d268f03a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * pr_dict_itor_new</definition>
        <argsstring>(pr_tree *tree)</argsstring>
        <name>pr_dict_itor_new</name>
        <param>
          <type><ref refid="structpr__tree" kindref="compound">pr_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="503" column="1" bodyfile="src/pr_tree.c" bodystart="503" bodyend="515"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="174">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="175">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="pr__tree_8c_1ae8398f448c6c0c7555d38840cba7bb55" compoundref="pr__tree_8c" startline="492" endline="500">pr_itor_new</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a5486c7c9fe121ec615a4e53176228eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pr_itor_free</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_free</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="517" column="6" bodyfile="src/pr_tree.c" bodystart="517" bodyend="517"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="393" endline="398">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a5e728838fdbe2fea666faae2bfe82a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_valid</definition>
        <argsstring>(const pr_itor *itor)</argsstring>
        <name>pr_itor_valid</name>
        <param>
          <type>const <ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="518" column="6" bodyfile="src/pr_tree.c" bodystart="518" bodyend="518"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="381" endline="384">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1aed5a10ede70733395106c6b749d7647a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pr_itor_invalidate</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_invalidate</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="519" column="6" bodyfile="src/pr_tree.c" bodystart="519" bodyend="519"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="387" endline="390">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a33078fbea87a49fd5d36c3d65b41b784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_next</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_next</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="520" column="6" bodyfile="src/pr_tree.c" bodystart="520" bodyend="520"/>
        <references refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" compoundref="tree__common_8c" startline="401" endline="405">tree_iterator_next</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a6f302faeffdfc624d9adf2e64e44a28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_prev</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_prev</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="521" column="6" bodyfile="src/pr_tree.c" bodystart="521" bodyend="521"/>
        <references refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" compoundref="tree__common_8c" startline="408" endline="412">tree_iterator_prev</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a511f5f263b38ffd94af79324cfa03832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_nextn</definition>
        <argsstring>(pr_itor *itor, size_t count)</argsstring>
        <name>pr_itor_nextn</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="522" column="6" bodyfile="src/pr_tree.c" bodystart="522" bodyend="522"/>
        <references refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" compoundref="tree__common_8c" startline="415" endline="421">tree_iterator_nextn</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a486455f59c063ba1261d158d44d7ef78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_prevn</definition>
        <argsstring>(pr_itor *itor, size_t count)</argsstring>
        <name>pr_itor_prevn</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="523" column="6" bodyfile="src/pr_tree.c" bodystart="523" bodyend="523"/>
        <references refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" compoundref="tree__common_8c" startline="424" endline="430">tree_iterator_prevn</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1aa8d018d3cbb7f0b1592347b618f566e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_first</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_first</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="524" column="6" bodyfile="src/pr_tree.c" bodystart="524" bodyend="524"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="433" endline="437">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a8e33347218fd385241a14d1209b0d102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_last</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_last</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="525" column="6" bodyfile="src/pr_tree.c" bodystart="525" bodyend="525"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="440" endline="444">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1aa4c5b7ef76aa1bfcbac8e0e40cd44046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_search</definition>
        <argsstring>(pr_itor *itor, const void *key)</argsstring>
        <name>pr_itor_search</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="526" column="6" bodyfile="src/pr_tree.c" bodystart="526" bodyend="526"/>
        <references refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" compoundref="tree__common_8c" startline="447" endline="451">tree_iterator_search</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a958018ddbd0d0fefdf9d897319536bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_search_le</definition>
        <argsstring>(pr_itor *itor, const void *key)</argsstring>
        <name>pr_itor_search_le</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="527" column="6" bodyfile="src/pr_tree.c" bodystart="527" bodyend="527"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="454" endline="458">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1af595a91bfa4ed7f53cfbdd7c8b75f669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_search_lt</definition>
        <argsstring>(pr_itor *itor, const void *key)</argsstring>
        <name>pr_itor_search_lt</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="528" column="6" bodyfile="src/pr_tree.c" bodystart="528" bodyend="528"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="461" endline="465">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1aa3580461d7082c82e1a8312529f799f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_search_ge</definition>
        <argsstring>(pr_itor *itor, const void *key)</argsstring>
        <name>pr_itor_search_ge</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="529" column="6" bodyfile="src/pr_tree.c" bodystart="529" bodyend="529"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="468" endline="472">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1af46574d3f0cac9d7a66f68b803464ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_search_gt</definition>
        <argsstring>(pr_itor *itor, const void *key)</argsstring>
        <name>pr_itor_search_gt</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="530" column="6" bodyfile="src/pr_tree.c" bodystart="530" bodyend="530"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="475" endline="479">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a1a4daa96bf7bfbcf18e11112f7d2115a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * pr_itor_key</definition>
        <argsstring>(const pr_itor *itor)</argsstring>
        <name>pr_itor_key</name>
        <param>
          <type>const <ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="531" column="12" bodyfile="src/pr_tree.c" bodystart="531" bodyend="531"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="495" endline="499">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1acc6f2b1cf7e2294ce3f3dd4ace188002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** pr_itor_datum</definition>
        <argsstring>(pr_itor *itor)</argsstring>
        <name>pr_itor_datum</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="532" column="6" bodyfile="src/pr_tree.c" bodystart="532" bodyend="532"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="502" endline="506">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a682978f7c2b9bbf42e3a632db907bfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pr_itor_compare</definition>
        <argsstring>(const pr_itor *i1, const pr_itor *i2)</argsstring>
        <name>pr_itor_compare</name>
        <param>
          <type>const <ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="533" column="5" bodyfile="src/pr_tree.c" bodystart="533" bodyend="533"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="482" endline="492">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="pr__tree_8c_1a4ad0eb725ec5114887f4c351b53fa320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pr_itor_remove</definition>
        <argsstring>(pr_itor *it)</argsstring>
        <name>pr_itor_remove</name>
        <param>
          <type><ref refid="structpr__itor" kindref="compound">pr_itor</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/pr_tree.c" line="536" column="1" bodyfile="src/pr_tree.c" bodystart="536" bodyend="543"/>
        <references refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" compoundref="pr__tree_8c" startline="50">pr_itor::node</references>
        <references refid="structpr__itor_1a0e42d341d4cb4d8aa99bd66d8a5877dd" compoundref="pr__tree_8c" startline="50">pr_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>internal<sp/>path<sp/>reduction<sp/>tree<sp/>implementation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>cf.<sp/>[Gonnet<sp/>1983],<sp/>[Gonnet<sp/>1984]</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pr__tree_8h" kindref="compound">pr_tree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__private_8h" kindref="compound">dict_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tree__common_8h" kindref="compound">tree_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="pr__tree_8c_1a9c99a7afdc595f4bf162db44d8375630" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpr__node" kindref="compound">pr_node</ref><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>;</highlight></codeline>
<codeline lineno="38" refid="structpr__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpr__node" kindref="compound">pr_node</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" kindref="member">TREE_NODE_FIELDS</ref>(<ref refid="structpr__node" kindref="compound">pr_node</ref>);</highlight></codeline>
<codeline lineno="40" refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WEIGHT(n)<sp/><sp/><sp/>((n)<sp/>?<sp/>(n)-&gt;weight<sp/>:<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structpr__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpr__tree" kindref="compound">pr_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="structpr__tree_1a3e0944ca8a425fcd254ca5057e885e45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" kindref="member">TREE_FIELDS</ref>(<ref refid="structpr__node" kindref="compound">pr_node</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structpr__itor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpr__itor" kindref="compound">pr_itor</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" kindref="member">TREE_ITERATOR_FIELDS</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdict__vtable" kindref="compound">dict_vtable</ref><sp/>pr_tree_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1a34060218131e6e94fea3533d268f03a9" kindref="member">pr_dict_itor_new</ref>,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1a369aef27d756b0dc5e36f9937aac3290" kindref="member">pr_tree_insert</ref>,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1a5439bea0d35397810101842ae9556056" kindref="member">pr_tree_remove</ref>,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)<sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1a7397755dbec281006bd3baf25f62f1de" kindref="member">pr_tree_select</ref>,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1ae3a3c1c743cb2c3fdfbaac2befcf3c5e" kindref="member">pr_tree_verify</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structitor__vtable" kindref="compound">itor_vtable</ref><sp/>pr_tree_itor_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)<sp/><sp/><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="pr__tree_8c_1a4ad0eb725ec5114887f4c351b53fa320" kindref="member">pr_itor_remove</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)<sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>fixup(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rot_left(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rot_right(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*</highlight></codeline>
<codeline lineno="98" refid="pr__tree_8c_1a021d6c481cd2bf3e59d1e2d2ab869428" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a021d6c481cd2bf3e59d1e2d2ab869428" kindref="member">pr_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(cmp_func<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structtree" kindref="compound">tree</ref>));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref><sp/>=<sp/>cmp_func;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*</highlight></codeline>
<codeline lineno="113" refid="pr__tree_8c_1a0f4e72cc520d3c11b84ac04989148352" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a0f4e72cc520d3c11b84ac04989148352" kindref="member">pr_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict" kindref="compound">dict</ref>*<sp/>dct<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dct));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dct)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dct-&gt;<ref refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" kindref="member">_object</ref><sp/>=<sp/><ref refid="pr__tree_8c_1a021d6c481cd2bf3e59d1e2d2ab869428" kindref="member">pr_tree_new</ref>(cmp_func)))<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(dct);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>dct-&gt;<ref refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" kindref="member">_vtable</ref><sp/>=<sp/>&amp;pr_tree_vtable;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dct;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="pr__tree_8c_1aa4a6bb903a1760fced365e1804c14b8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1aa4a6bb903a1760fced365e1804c14b8f" kindref="member">pr_tree_free</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" kindref="member">tree_free</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>delete_func);<sp/>}</highlight></codeline>
<codeline lineno="127" refid="pr__tree_8c_1af03a9d82a232ad95cab29fe57da099ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1af03a9d82a232ad95cab29fe57da099ab" kindref="member">pr_tree_search</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="128" refid="pr__tree_8c_1acc5e721a419ab0385d680fcf6876546c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1acc5e721a419ab0385d680fcf6876546c" kindref="member">pr_tree_search_le</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="129" refid="pr__tree_8c_1a19abec2733a7ea9caa29f1d22e7b850c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1a19abec2733a7ea9caa29f1d22e7b850c" kindref="member">pr_tree_search_lt</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="130" refid="pr__tree_8c_1a66085cf58e260d862ce8fe4fbfe31df5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1a66085cf58e260d862ce8fe4fbfe31df5" kindref="member">pr_tree_search_ge</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="131" refid="pr__tree_8c_1a13aac3c296260214168e0702ad88095b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1a13aac3c296260214168e0702ad88095b" kindref="member">pr_tree_search_gt</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">fixup(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>internal<sp/>path<sp/>length<sp/>of<sp/>a<sp/>tree<sp/>is<sp/>defined<sp/>as<sp/>the<sp/>sum<sp/>of<sp/>levels<sp/>of</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>all<sp/>the<sp/>tree&apos;s<sp/>internal<sp/>nodes.<sp/>Path-reduction<sp/>trees<sp/>are<sp/>similar<sp/>to</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>weight-balanced<sp/>trees,<sp/>except<sp/>that<sp/>rotations<sp/>are<sp/>only<sp/>made<sp/>when<sp/>they<sp/>can</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>reduce<sp/>the<sp/>total<sp/>internal<sp/>path<sp/>length<sp/>of<sp/>the<sp/>tree.<sp/>These<sp/>particular</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>trees<sp/>are<sp/>in<sp/>the<sp/>class<sp/>BB[1/3],<sp/>but<sp/>because<sp/>of<sp/>these<sp/>restrictions<sp/>their</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>performance<sp/>is<sp/>superior<sp/>to<sp/>BB[1/3]<sp/>trees.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Consider<sp/>a<sp/>node<sp/>N.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>single<sp/>left<sp/>rotation<sp/>is<sp/>performed<sp/>when</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>WEIGHT(n-&gt;llink)<sp/>&lt;<sp/>WEIGHT(n-&gt;rlink-&gt;rlink)</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>right-left<sp/>rotation<sp/>is<sp/>performed<sp/>when</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>WEIGHT(n-&gt;llink)<sp/>&lt;<sp/>WEIGHT(n-&gt;rlink-&gt;llink)</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>single<sp/>right<sp/>rotation<sp/>is<sp/>performed<sp/>when</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>WEIGHT(n-&gt;rlink)<sp/>&gt;<sp/>WEIGHT(n-&gt;llink-&gt;llink)</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>left-right<sp/>rotation<sp/>is<sp/>performed<sp/>when</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>WEIGHT(n-&gt;rlink)<sp/>&gt;<sp/>WEIGHT(n-&gt;llink-&gt;rlink)</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Although<sp/>the<sp/>worst<sp/>case<sp/>number<sp/>of<sp/>rotations<sp/>for<sp/>a<sp/>single<sp/>insertion<sp/>or</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>deletion<sp/>is<sp/>O(n),<sp/>the<sp/>amortized<sp/>worst-case<sp/>number<sp/>of<sp/>rotations<sp/>is</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>.44042lg(n)<sp/>+<sp/>O(1)<sp/>for<sp/>insertion,<sp/>and<sp/>.42062lg(n)<sp/>+<sp/>O(1)<sp/>for<sp/>deletion.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>We<sp/>use<sp/>tail<sp/>recursion<sp/>to<sp/>minimize<sp/>the<sp/>number<sp/>of<sp/>recursive<sp/>calls.<sp/>For</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>single<sp/>rotations,<sp/>no<sp/>recursive<sp/>call<sp/>is<sp/>made,<sp/>and<sp/>we<sp/>tail<sp/>recurse<sp/>to</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>continue<sp/>checking<sp/>for<sp/>out-of-balance<sp/>conditions.<sp/>For<sp/>double,<sp/>we<sp/>make<sp/>one</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>recursive<sp/>call<sp/>and<sp/>then<sp/>tail<sp/>recurse.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lweight<sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rweight<sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lweight<sp/>&lt;<sp/>rweight)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>r<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(r<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(r-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>&gt;<sp/>lweight)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Commenting<sp/>the<sp/>next<sp/>line<sp/>means<sp/>we<sp/>must<sp/>make<sp/>the<sp/>weight</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>verification<sp/>condition<sp/>in<sp/>node_verify()<sp/>less<sp/>stringent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>r);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(r-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>&gt;<sp/>lweight)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>|r|<sp/>right,<sp/>then<sp/>|node|<sp/>left,<sp/>with<sp/>|rl|<sp/>taking<sp/>the<sp/>place</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>|node|<sp/>and<sp/>having<sp/>|node|<sp/>and<sp/>|r|<sp/>as<sp/>left<sp/>and<sp/>right<sp/>children,</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>respectively.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rl<sp/>=<sp/>r-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>rl-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rl-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>rl;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>a)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>rl-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rl-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>rl;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((r-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>b)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rl-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>rl;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(a)<sp/>-<sp/>r-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(b)<sp/>-<sp/>rl-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rl-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+<sp/>r-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>r);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lweight<sp/>&gt;<sp/>rweight)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>l<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(l<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(l-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>&gt;<sp/>rweight)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Commenting<sp/>the<sp/>next<sp/>line<sp/>means<sp/>we<sp/>must<sp/>turn<sp/>the<sp/>weight</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>verification<sp/>condition<sp/>in<sp/>node_verify()<sp/>less<sp/>stringent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>l);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(l-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>&gt;<sp/>rweight)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>LR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rotate<sp/>|l|<sp/>left,<sp/>then<sp/>|node|<sp/>right,<sp/>with<sp/>|lr|<sp/>taking<sp/>the<sp/>place<sp/>of</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>|node|<sp/>and<sp/>having<sp/>|l|<sp/>and<sp/>|node|<sp/>as<sp/>left<sp/>and<sp/>right<sp/>children,</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>respectively.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>lr<sp/>=<sp/>l-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>lr-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>lr;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((l-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>a)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>lr-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>lr;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>b)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>lr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(b)<sp/>-<sp/>l-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(a)<sp/>-<sp/>lr-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lr-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+<sp/>l-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>l);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotations;</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="252" refid="pr__tree_8c_1a369aef27d756b0dc5e36f9937aac3290" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a369aef27d756b0dc5e36f9937aac3290" kindref="member">pr_tree_insert</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;node-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>add<sp/>=<sp/>node_new(key);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!add)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(add-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>parent))<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>add;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>add;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>add;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((node<sp/>=<sp/>parent)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>parent-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>+=<sp/>rotations;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;add-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">remove_node(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>&amp;&amp;<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>out;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>&gt;<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tmp;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>out-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>out-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>out;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(!node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>||<sp/>!node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Splice<sp/>in<sp/>the<sp/>successor,<sp/>if<sp/>any.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>child<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>?<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>:<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>parent<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>child-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>child;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(node);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>--;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>move<sp/>up<sp/>the<sp/>tree,<sp/>decrementing<sp/>weights.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(parent)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>--parent-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>up<sp/>=<sp/>parent-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref>;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>rotations<sp/>+=<sp/>fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>up;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>+=<sp/>rotations;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="328" refid="pr__tree_8c_1a5439bea0d35397810101842ae9556056" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a5439bea0d35397810101842ae9556056" kindref="member">pr_tree_remove</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref>)<sp/>{<sp/>NULL,<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref><sp/>result<sp/>=<sp/>{<sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338" refid="pr__tree_8c_1a9339232ae391d0e7f673fa275733555c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a9339232ae391d0e7f673fa275733555c" kindref="member">pr_tree_clear</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" kindref="member">tree_clear</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>delete_func);<sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="pr__tree_8c_1a37f8889c7ddffaf5820ff824b9b798e7" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a37f8889c7ddffaf5820ff824b9b798e7" kindref="member">pr_tree_traverse</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" kindref="member">tree_traverse</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>visit,<sp/>user_data);</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="pr__tree_8c_1a7397755dbec281006bd3baf25f62f1de" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a7397755dbec281006bd3baf25f62f1de" kindref="member">pr_tree_select</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>datum)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datum)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nw<sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>+<sp/>1<sp/>&gt;=<sp/>nw)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>+<sp/>1<sp/>==<sp/>nw)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datum)</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>nw;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="pr__tree_8c_1ad01559bb0016db3d55d99756d959479d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1ad01559bb0016db3d55d99756d959479d" kindref="member">pr_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="376" refid="pr__tree_8c_1a0a8f3a4bfb2749b87517fa08971ca3da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a0a8f3a4bfb2749b87517fa08971ca3da" kindref="member">pr_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" kindref="member">tree_max_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="377" refid="pr__tree_8c_1a813fe6b4373aebdf8d7eeeb8f022afd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a813fe6b4373aebdf8d7eeeb8f022afd3" kindref="member">pr_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" kindref="member">tree_min_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="378" refid="pr__tree_8c_1acdf0fc6fc9b122418083888333b7ccda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1acdf0fc6fc9b122418083888333b7ccda" kindref="member">pr_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" kindref="member">tree_total_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*</highlight></codeline>
<codeline lineno="381"><highlight class="normal">node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*node));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/>rot_left(T,<sp/>B):</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>B<sp/><sp/><sp/><sp/><sp/><sp/>D</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/><sp/>/<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/><sp/><sp/>D<sp/><sp/><sp/>==&gt;<sp/><sp/><sp/>B<sp/><sp/><sp/>E</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>/<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>C<sp/><sp/><sp/>E<sp/><sp/><sp/><sp/><sp/>A<sp/><sp/><sp/>C</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>Only<sp/>the<sp/>weights<sp/>of<sp/>B<sp/>and<sp/>B&apos;s<sp/>right<sp/>child<sp/>to<sp/>be<sp/>readjusted.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">rot_left(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref><sp/>*node)</highlight></codeline>
<codeline lineno="409"><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>rlink<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a364dcfa88f9f8e27d1e0ffa7ae7cd15d" kindref="member">tree_node_rot_left</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>+<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>rlink-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>+<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(rlink-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>rot_right(T,<sp/>D):</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/><sp/><sp/><sp/><sp/>/</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>D<sp/><sp/><sp/><sp/><sp/><sp/>B</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/>/<sp/>\<sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>B<sp/><sp/><sp/>E<sp/><sp/>==&gt;<sp/><sp/>A<sp/><sp/><sp/>D</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/><sp/><sp/>/<sp/>\<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/><sp/>A<sp/><sp/><sp/>C<sp/><sp/><sp/><sp/><sp/><sp/>C<sp/><sp/><sp/>E</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>Only<sp/>the<sp/>weights<sp/>of<sp/>D<sp/>and<sp/>D&apos;s<sp/>left<sp/>child<sp/>need<sp/>to<sp/>be<sp/>readjusted.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">rot_right(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>llink<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ad79fac7e5a30bf71ac8a7d53c56cf176" kindref="member">tree_node_rot_right</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>+<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>llink-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(llink-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>+<sp/>node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">node_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!parent)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>==<sp/>node<sp/>||<sp/>parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(node-&gt;<ref refid="structpr__node_1abf99a703fdebf3d585be06abfc890b49" kindref="member">parent</ref><sp/>==<sp/>parent);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(parent-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structpr__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>l<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__node" kindref="compound">pr_node</ref>*<sp/>r<sp/>=<sp/>node-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>l)<sp/>||</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>r))</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>lweight<sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(l);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rweight<sp/>=<sp/><ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(r);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(node-&gt;<ref refid="structpr__node_1a72e70550dea6ad3694160a3d35dd932f" kindref="member">weight</ref><sp/>==<sp/>lweight<sp/>+<sp/>rweight);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rweight<sp/>&gt;<sp/>lweight)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(r-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>&lt;=<sp/>lweight);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(r-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>&lt;=<sp/>lweight);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lweight<sp/>&gt;<sp/>rweight)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(l-&gt;<ref refid="structpr__node_1a3c64480e8bd2fe2e3c0c4395dd178fd3" kindref="member">llink</ref>)<sp/>&lt;=<sp/>rweight);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="pr__tree_8c_1ab15db866407010ad20587248b4febfcb" kindref="member">WEIGHT</ref>(l-&gt;<ref refid="structpr__node_1aa12c8a5c73b3b5f356df3fd22236f931" kindref="member">rlink</ref>)<sp/>&lt;=<sp/>rweight);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="pr__tree_8c_1ae3a3c1c743cb2c3fdfbaac2befcf3c5e" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1ae3a3c1c743cb2c3fdfbaac2befcf3c5e" kindref="member">pr_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>NULL,<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*</highlight></codeline>
<codeline lineno="492" refid="pr__tree_8c_1ae8398f448c6c0c7555d38840cba7bb55" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1ae8398f448c6c0c7555d38840cba7bb55" kindref="member">pr_itor_new</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structpr__itor_1a0e42d341d4cb4d8aa99bd66d8a5877dd" kindref="member">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*</highlight></codeline>
<codeline lineno="503" refid="pr__tree_8c_1a34060218131e6e94fea3533d268f03a9" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a34060218131e6e94fea3533d268f03a9" kindref="member">pr_dict_itor_new</ref>(<ref refid="structpr__tree" kindref="compound">pr_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(itor-&gt;<ref refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" kindref="member">_itor</ref><sp/>=<sp/><ref refid="pr__tree_8c_1ae8398f448c6c0c7555d38840cba7bb55" kindref="member">pr_itor_new</ref>(<ref refid="structtree" kindref="compound">tree</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(itor);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" kindref="member">_vtable</ref><sp/>=<sp/>&amp;pr_tree_itor_vtable;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="pr__tree_8c_1a5486c7c9fe121ec615a4e53176228eed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a5486c7c9fe121ec615a4e53176228eed" kindref="member">pr_itor_free</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="518" refid="pr__tree_8c_1a5e728838fdbe2fea666faae2bfe82a1d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a5e728838fdbe2fea666faae2bfe82a1d" kindref="member">pr_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="519" refid="pr__tree_8c_1aed5a10ede70733395106c6b749d7647a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1aed5a10ede70733395106c6b749d7647a" kindref="member">pr_itor_invalidate</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="520" refid="pr__tree_8c_1a33078fbea87a49fd5d36c3d65b41b784" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a33078fbea87a49fd5d36c3d65b41b784" kindref="member">pr_itor_next</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" kindref="member">tree_iterator_next</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="521" refid="pr__tree_8c_1a6f302faeffdfc624d9adf2e64e44a28a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a6f302faeffdfc624d9adf2e64e44a28a" kindref="member">pr_itor_prev</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" kindref="member">tree_iterator_prev</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="522" refid="pr__tree_8c_1a511f5f263b38ffd94af79324cfa03832" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a511f5f263b38ffd94af79324cfa03832" kindref="member">pr_itor_nextn</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" kindref="member">tree_iterator_nextn</ref>(itor,<sp/>count);<sp/>}<sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>speed<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="pr__tree_8c_1a486455f59c063ba1261d158d44d7ef78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a486455f59c063ba1261d158d44d7ef78" kindref="member">pr_itor_prevn</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" kindref="member">tree_iterator_prevn</ref>(itor,<sp/>count);<sp/>}<sp/></highlight><highlight class="comment">/*<sp/>TODO:<sp/>speed<sp/>up<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="pr__tree_8c_1aa8d018d3cbb7f0b1592347b618f566e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1aa8d018d3cbb7f0b1592347b618f566e9" kindref="member">pr_itor_first</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="525" refid="pr__tree_8c_1a8e33347218fd385241a14d1209b0d102" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a8e33347218fd385241a14d1209b0d102" kindref="member">pr_itor_last</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="526" refid="pr__tree_8c_1aa4c5b7ef76aa1bfcbac8e0e40cd44046" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1aa4c5b7ef76aa1bfcbac8e0e40cd44046" kindref="member">pr_itor_search</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="527" refid="pr__tree_8c_1a958018ddbd0d0fefdf9d897319536bf4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a958018ddbd0d0fefdf9d897319536bf4" kindref="member">pr_itor_search_le</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="528" refid="pr__tree_8c_1af595a91bfa4ed7f53cfbdd7c8b75f669" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1af595a91bfa4ed7f53cfbdd7c8b75f669" kindref="member">pr_itor_search_lt</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="529" refid="pr__tree_8c_1aa3580461d7082c82e1a8312529f799f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1aa3580461d7082c82e1a8312529f799f3" kindref="member">pr_itor_search_ge</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="530" refid="pr__tree_8c_1af46574d3f0cac9d7a66f68b803464ee4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1af46574d3f0cac9d7a66f68b803464ee4" kindref="member">pr_itor_search_gt</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="531" refid="pr__tree_8c_1a1a4daa96bf7bfbcf18e11112f7d2115a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="pr__tree_8c_1a1a4daa96bf7bfbcf18e11112f7d2115a" kindref="member">pr_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="532" refid="pr__tree_8c_1acc6f2b1cf7e2294ce3f3dd4ace188002" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="pr__tree_8c_1acc6f2b1cf7e2294ce3f3dd4ace188002" kindref="member">pr_itor_datum</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="533" refid="pr__tree_8c_1a682978f7c2b9bbf42e3a632db907bfdb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pr__tree_8c_1a682978f7c2b9bbf42e3a632db907bfdb" kindref="member">pr_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>i2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>(i1,<sp/>i2);<sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="pr__tree_8c_1a4ad0eb725ec5114887f4c351b53fa320" refkind="member"><highlight class="normal"><ref refid="pr__tree_8c_1a4ad0eb725ec5114887f4c351b53fa320" kindref="member">pr_itor_remove</ref>(<ref refid="structpr__itor" kindref="compound">pr_itor</ref>*<sp/>it)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!it-&gt;<ref refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(it-&gt;<ref refid="structpr__itor_1a0e42d341d4cb4d8aa99bd66d8a5877dd" kindref="member">tree</ref>,<sp/>it-&gt;<ref refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;<ref refid="structpr__itor_1a6abe4fbcd865ddab321cb1e020355fc7" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/pr_tree.c"/>
  </compounddef>
</doxygen>
