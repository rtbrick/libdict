<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="rb__tree_8c" kind="file" language="C++">
    <compoundname>rb_tree.c</compoundname>
    <includes refid="rb__tree_8h" local="yes">rb_tree.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="dict__private_8h" local="yes">dict_private.h</includes>
    <includes refid="tree__common_8h" local="yes">tree_common.h</includes>
    <incdepgraph>
      <node id="3">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="18">
        <label>stdlib.h</label>
      </node>
      <node id="15">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structrb__node" prot="public">rb_node</innerclass>
    <innerclass refid="structrb__tree" prot="public">rb_tree</innerclass>
    <innerclass refid="structrb__itor" prot="public">rb_itor</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" prot="public" static="no">
        <name>RB_RED</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="47" column="9" bodyfile="src/rb_tree.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" prot="public" static="no">
        <name>RB_BLACK</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="48" column="9" bodyfile="src/rb_tree.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" prot="public" static="no">
        <name>PARENT</name>
        <param><defname>node</defname></param>
        <initializer>((<ref refid="structrb__node" kindref="compound">rb_node</ref>*)((node)-&gt;color &amp; ~<ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="50" column="9" bodyfile="src/rb_tree.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" prot="public" static="no">
        <name>COLOR</name>
        <param><defname>node</defname></param>
        <initializer>((node)-&gt;color &amp; <ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="51" column="9" bodyfile="src/rb_tree.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" prot="public" static="no">
        <name>SET_RED</name>
        <param><defname>node</defname></param>
        <initializer>(node)-&gt;color &amp;= (~(intptr_t)<ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="53" column="9" bodyfile="src/rb_tree.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" prot="public" static="no">
        <name>SET_BLACK</name>
        <param><defname>node</defname></param>
        <initializer>(node)-&gt;color |= ((intptr_t)<ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="54" column="9" bodyfile="src/rb_tree.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" prot="public" static="no">
        <name>SET_PARENT</name>
        <param><defname>node</defname></param>
        <param><defname>p</defname></param>
        <initializer>(node)-&gt;color = <ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node) | (intptr_t)(p)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="55" column="9" bodyfile="src/rb_tree.c" bodystart="55" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rb__tree_8c_1a3debd163d7696f113822817ea5f74d63" prot="public" static="no">
        <type>struct <ref refid="structrb__node" kindref="compound">rb_node</ref></type>
        <definition>typedef struct rb_node rb_node</definition>
        <argsstring></argsstring>
        <name>rb_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="38" column="22" bodyfile="src/rb_tree.c" bodystart="38" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="rb__tree_8c_1a3cf01baf14dac893e481acd0d731570f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structdict__vtable" kindref="compound">dict_vtable</ref></type>
        <definition>const dict_vtable rb_tree_vtable</definition>
        <argsstring></argsstring>
        <name>rb_tree_vtable</name>
        <initializer>= {
    true,
    (<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)        <ref refid="rb__tree_8c_1a2b40ed7b405e2b28271da7f26f04789b" kindref="member">rb_dict_itor_new</ref>,
    (<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)       <ref refid="rb__tree_8c_1a899a658f343e50449096281e805558c6" kindref="member">rb_tree_free</ref>,
    (<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)      <ref refid="rb__tree_8c_1ab46bc504985390833fe0237386d8b8c3" kindref="member">rb_tree_insert</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>,
    (<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)      <ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>,
    (<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)      <ref refid="rb__tree_8c_1adbb520715677367d143d29f4aa385adf" kindref="member">rb_tree_remove</ref>,
    (<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)       <ref refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" kindref="member">rb_tree_clear</ref>,
    (<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)    <ref refid="rb__tree_8c_1a37dab4056fc3c5c0dd2ec82f16b83b8b" kindref="member">rb_tree_traverse</ref>,
    (<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)      <ref refid="rb__tree_8c_1ade69cd881303ce0c2984862383788985" kindref="member">rb_tree_select</ref>,
    (<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)       <ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,
    (<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)      <ref refid="rb__tree_8c_1ab5f358cd3fc473153a486aa394367aa5" kindref="member">rb_tree_verify</ref>,
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="65" column="26" bodyfile="src/rb_tree.c" bodystart="65" bodyend="81"/>
      </memberdef>
      <memberdef kind="variable" id="rb__tree_8c_1a6bf25b6b99105ab504f5bf7fb9a9ef0e" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structitor__vtable" kindref="compound">itor_vtable</ref></type>
        <definition>const itor_vtable rb_tree_itor_vtable</definition>
        <argsstring></argsstring>
        <name>rb_tree_itor_vtable</name>
        <initializer>= {
    (<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)       <ref refid="rb__tree_8c_1a8be4761e630cd2a0dc3ac0d0ed0bf498" kindref="member">rb_itor_free</ref>,
    (<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)       <ref refid="rb__tree_8c_1a1eec6338f4eb24421b4556a65dd8937f" kindref="member">rb_itor_valid</ref>,
    (<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)  <ref refid="rb__tree_8c_1a49c9c4d5489be20c7bbf27ea84df4755" kindref="member">rb_itor_invalidate</ref>,
    (<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)        <ref refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" kindref="member">rb_itor_next</ref>,
    (<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)        <ref refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" kindref="member">rb_itor_prev</ref>,
    (<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)       <ref refid="rb__tree_8c_1a8bae4df64ac24e53ee234ac75d5a26ec" kindref="member">rb_itor_nextn</ref>,
    (<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)       <ref refid="rb__tree_8c_1a5fafb83419257dae777857066c165da0" kindref="member">rb_itor_prevn</ref>,
    (<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)       <ref refid="rb__tree_8c_1a8461a547bf3168ff9f01081558457413" kindref="member">rb_itor_first</ref>,
    (<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)        <ref refid="rb__tree_8c_1aafcedf2a010d97489b219694c323c90c" kindref="member">rb_itor_last</ref>,
    (<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)         <ref refid="rb__tree_8c_1a139503219f165edcacbb3b5eda9206c5" kindref="member">rb_itor_key</ref>,
    (<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)       <ref refid="rb__tree_8c_1a8221a5aebd63a69b82f5665bc6e43fce" kindref="member">rb_itor_datum</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="rb__tree_8c_1a659ce1ce60999d8d21ab172f7507d78e" kindref="member">rb_itor_search</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="rb__tree_8c_1a490c25aed2c521b5996bf62d07d30bd2" kindref="member">rb_itor_search_le</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="rb__tree_8c_1a0dfa36745fc6fb3e154fd97ed920bec5" kindref="member">rb_itor_search_lt</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="rb__tree_8c_1a1181f9daa09876a74fe0e47048400f2a" kindref="member">rb_itor_search_ge</ref>,
    (<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)     <ref refid="rb__tree_8c_1af2c10957d138378c35f5e3ab0c398f40" kindref="member">rb_itor_search_gt</ref>,
    (<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)     <ref refid="rb__tree_8c_1a5d6bd6505d2feb275514a5f70e63ffbb" kindref="member">rb_itor_remove</ref>,
    (<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)    <ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="83" column="26" bodyfile="src/rb_tree.c" bodystart="83" bodyend="102"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="rb__tree_8c_1aaae070e2770a8b4de295389d2efe34cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rot_left</definition>
        <argsstring>(rb_tree *tree, rb_node *node)</argsstring>
        <name>rot_left</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="428" column="1" bodyfile="src/rb_tree.c" bodystart="428" bodyend="438" declfile="src/rb_tree.c" declline="104" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a9537eb2cdfc56ca1b14f29f5ed799801" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void rot_right</definition>
        <argsstring>(rb_tree *tree, rb_node *node)</argsstring>
        <name>rot_right</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="441" column="1" bodyfile="src/rb_tree.c" bodystart="441" bodyend="451" declfile="src/rb_tree.c" declline="105" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a95cfb4e823b4c6fe371b4b59be9ea6f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned insert_fixup</definition>
        <argsstring>(rb_tree *tree, rb_node *node)</argsstring>
        <name>insert_fixup</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="214" column="1" bodyfile="src/rb_tree.c" bodystart="214" bodyend="265" declfile="src/rb_tree.c" declline="106" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a35f3961eec3c31276808fc5142f8b7b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned delete_fixup</definition>
        <argsstring>(rb_tree *tree, rb_node *node, rb_node *parent, bool left)</argsstring>
        <name>delete_fixup</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>left</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="305" column="1" bodyfile="src/rb_tree.c" bodystart="305" bodyend="377" declfile="src/rb_tree.c" declline="107" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a742bfa831aca02f4517d2a128f377681" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
        <definition>static rb_node * node_new</definition>
        <argsstring>(void *key)</argsstring>
        <name>node_new</name>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="454" column="1" bodyfile="src/rb_tree.c" bodystart="454" bodyend="466" declfile="src/rb_tree.c" declline="108" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a5584c86643b21e121a9d770dd551bcca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
        <definition>static rb_node * node_next</definition>
        <argsstring>(rb_node *node)</argsstring>
        <name>node_next</name>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="469" column="1" bodyfile="src/rb_tree.c" bodystart="469" bodyend="484" declfile="src/rb_tree.c" declline="109" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ac19b5bb15d38455354937be64c0623df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
        <definition>static rb_node * node_prev</definition>
        <argsstring>(rb_node *node)</argsstring>
        <name>node_prev</name>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="487" column="1" bodyfile="src/rb_tree.c" bodystart="487" bodyend="502" declfile="src/rb_tree.c" declline="110" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
        <definition>rb_tree * rb_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>rb_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="113" column="1" bodyfile="src/rb_tree.c" bodystart="113" bodyend="125"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ad5f8e3d822b3e96bb421ee9eb90ab327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * rb_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>rb_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="128" column="1" bodyfile="src/rb_tree.c" bodystart="128" bodyend="139"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" compoundref="rb__tree_8c" startline="113" endline="125">rb_tree_new</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a899a658f343e50449096281e805558c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_free</definition>
        <argsstring>(rb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>rb_tree_free</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="142" column="1" bodyfile="src/rb_tree.c" bodystart="142" bodyend="146"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" compoundref="rb__tree_8c" startline="149" endline="168">rb_tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_clear</definition>
        <argsstring>(rb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>rb_tree_clear</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="149" column="1" bodyfile="src/rb_tree.c" bodystart="149" bodyend="168"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" compoundref="rb__tree_8c" startline="50">PARENT</references>
        <references refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" compoundref="rb__tree_8c" startline="44">rb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a3fc548a4253c2d36b8c3a651e043ca18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="170" column="6" bodyfile="src/rb_tree.c" bodystart="170" bodyend="170"/>
        <references refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" compoundref="tree__common_8c" startline="144" endline="148">tree_search</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ab85b32b2d8a460a3e7d32405c6a2e282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_le</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_le</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="171" column="6" bodyfile="src/rb_tree.c" bodystart="171" bodyend="171"/>
        <references refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" compoundref="tree__common_8c" startline="170" endline="174">tree_search_le</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a0395841d32563e097774d61db56196fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_lt</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_lt</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="172" column="6" bodyfile="src/rb_tree.c" bodystart="172" bodyend="172"/>
        <references refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" compoundref="tree__common_8c" startline="194" endline="198">tree_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a2047044b2b501362e601b082238af365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_ge</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_ge</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="173" column="6" bodyfile="src/rb_tree.c" bodystart="173" bodyend="173"/>
        <references refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" compoundref="tree__common_8c" startline="221" endline="225">tree_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1af4a398d3550bd9ce14ba56118cf678ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_tree_search_gt</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_search_gt</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="174" column="6" bodyfile="src/rb_tree.c" bodystart="174" bodyend="174"/>
        <references refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" compoundref="tree__common_8c" startline="245" endline="249">tree_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ab46bc504985390833fe0237386d8b8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result rb_tree_insert</definition>
        <argsstring>(rb_tree *tree, void *key)</argsstring>
        <name>rb_tree_insert</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="177" column="1" bodyfile="src/rb_tree.c" bodystart="177" bodyend="211"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" compoundref="rb__tree_8c" startline="44">rb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
        <references refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" compoundref="rb__tree_8c" startline="54">SET_BLACK</references>
        <references refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" compoundref="rb__tree_8c" startline="55">SET_PARENT</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a1006d21e3d0a77092a5131507181d26b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void remove_node</definition>
        <argsstring>(rb_tree *tree, rb_node *node)</argsstring>
        <name>remove_node</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="268" column="1" bodyfile="src/rb_tree.c" bodystart="268" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1adbb520715677367d143d29f4aa385adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result rb_tree_remove</definition>
        <argsstring>(rb_tree *tree, const void *key)</argsstring>
        <name>rb_tree_remove</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="294" column="1" bodyfile="src/rb_tree.c" bodystart="294" bodyend="302"/>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1abb407a4fd41a281a47515f85d963c213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_count</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_count</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="379" column="8" bodyfile="src/rb_tree.c" bodystart="379" bodyend="379"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="295" endline="298">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a07eb50c7b258fda3705f24d669bd3b20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_min_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="380" column="8" bodyfile="src/rb_tree.c" bodystart="380" bodyend="380"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="340" endline="344">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a4c4fe53f8606411bfbba72be208711a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_max_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="381" column="8" bodyfile="src/rb_tree.c" bodystart="381" bodyend="381"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="355" endline="359">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a39beb3c1aff54da1098d4aff97172244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_total_path_length</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="382" column="8" bodyfile="src/rb_tree.c" bodystart="382" bodyend="382"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="370" endline="374">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a37dab4056fc3c5c0dd2ec82f16b83b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rb_tree_traverse</definition>
        <argsstring>(rb_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>rb_tree_traverse</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="385" column="1" bodyfile="src/rb_tree.c" bodystart="385" bodyend="397"/>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ade69cd881303ce0c2984862383788985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_tree_select</definition>
        <argsstring>(rb_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>rb_tree_select</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="400" column="1" bodyfile="src/rb_tree.c" bodystart="400" bodyend="425"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="rb__tree_8c" startline="41">rb_node::datum</references>
        <references refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="rb__tree_8c" startline="40">rb_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a7840a3ba67e30b1940194bcb908e70ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool node_verify</definition>
        <argsstring>(const rb_tree *tree, const rb_node *parent, const rb_node *node, unsigned black_node_count, unsigned leaf_black_node_count)</argsstring>
        <name>node_verify</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const <ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="structrb__node" kindref="compound">rb_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>black_node_count</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>leaf_black_node_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="505" column="1" bodyfile="src/rb_tree.c" bodystart="505" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1ab5f358cd3fc473153a486aa394367aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_tree_verify</definition>
        <argsstring>(const rb_tree *tree)</argsstring>
        <name>rb_tree_verify</name>
        <param>
          <type>const <ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="545" column="1" bodyfile="src/rb_tree.c" bodystart="545" bodyend="559"/>
        <references refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" compoundref="rb__tree_8c" startline="51">COLOR</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" compoundref="rb__tree_8c" startline="43">rb_node::llink</references>
        <references refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" compoundref="rb__tree_8c" startline="48">RB_BLACK</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
        <definition>rb_itor * rb_itor_new</definition>
        <argsstring>(rb_tree *tree)</argsstring>
        <name>rb_itor_new</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="562" column="1" bodyfile="src/rb_tree.c" bodystart="562" bodyend="570"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" compoundref="rb__tree_8c" startline="62">rb_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a2b40ed7b405e2b28271da7f26f04789b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * rb_dict_itor_new</definition>
        <argsstring>(rb_tree *tree)</argsstring>
        <name>rb_dict_itor_new</name>
        <param>
          <type><ref refid="structrb__tree" kindref="compound">rb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="573" column="1" bodyfile="src/rb_tree.c" bodystart="573" bodyend="584"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="175">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="176">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" compoundref="rb__tree_8c" startline="562" endline="570">rb_itor_new</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8be4761e630cd2a0dc3ac0d0ed0bf498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rb_itor_free</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_free</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="586" column="6" bodyfile="src/rb_tree.c" bodystart="586" bodyend="586"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="389" endline="394">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a1eec6338f4eb24421b4556a65dd8937f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_valid</definition>
        <argsstring>(const rb_itor *itor)</argsstring>
        <name>rb_itor_valid</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="587" column="6" bodyfile="src/rb_tree.c" bodystart="587" bodyend="587"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="377" endline="380">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a49c9c4d5489be20c7bbf27ea84df4755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rb_itor_invalidate</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_invalidate</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="588" column="6" bodyfile="src/rb_tree.c" bodystart="588" bodyend="588"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="383" endline="386">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_next</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_next</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="591" column="1" bodyfile="src/rb_tree.c" bodystart="591" bodyend="596"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_prev</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_prev</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="599" column="1" bodyfile="src/rb_tree.c" bodystart="599" bodyend="604"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8bae4df64ac24e53ee234ac75d5a26ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_nextn</definition>
        <argsstring>(rb_itor *itor, size_t count)</argsstring>
        <name>rb_itor_nextn</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="607" column="1" bodyfile="src/rb_tree.c" bodystart="607" bodyend="614"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" compoundref="rb__tree_8c" startline="591" endline="596">rb_itor_next</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a5fafb83419257dae777857066c165da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_prevn</definition>
        <argsstring>(rb_itor *itor, size_t count)</argsstring>
        <name>rb_itor_prevn</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="617" column="1" bodyfile="src/rb_tree.c" bodystart="617" bodyend="624"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" compoundref="rb__tree_8c" startline="599" endline="604">rb_itor_prev</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8461a547bf3168ff9f01081558457413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_first</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_first</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="626" column="6" bodyfile="src/rb_tree.c" bodystart="626" bodyend="626"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="437" endline="441">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1aafcedf2a010d97489b219694c323c90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_last</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_last</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="627" column="6" bodyfile="src/rb_tree.c" bodystart="627" bodyend="627"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="444" endline="448">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a659ce1ce60999d8d21ab172f7507d78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="628" column="6" bodyfile="src/rb_tree.c" bodystart="628" bodyend="628"/>
        <references refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" compoundref="tree__common_8c" startline="451" endline="455">tree_iterator_search</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a490c25aed2c521b5996bf62d07d30bd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_le</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_le</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="629" column="6" bodyfile="src/rb_tree.c" bodystart="629" bodyend="629"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="458" endline="462">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a0dfa36745fc6fb3e154fd97ed920bec5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_lt</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_lt</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="630" column="6" bodyfile="src/rb_tree.c" bodystart="630" bodyend="630"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="465" endline="469">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a1181f9daa09876a74fe0e47048400f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_ge</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_ge</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="631" column="6" bodyfile="src/rb_tree.c" bodystart="631" bodyend="631"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="472" endline="476">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1af2c10957d138378c35f5e3ab0c398f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_search_gt</definition>
        <argsstring>(rb_itor *itor, const void *key)</argsstring>
        <name>rb_itor_search_gt</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="632" column="6" bodyfile="src/rb_tree.c" bodystart="632" bodyend="632"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="479" endline="483">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a139503219f165edcacbb3b5eda9206c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * rb_itor_key</definition>
        <argsstring>(const rb_itor *itor)</argsstring>
        <name>rb_itor_key</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="633" column="12" bodyfile="src/rb_tree.c" bodystart="633" bodyend="633"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="499" endline="503">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a8221a5aebd63a69b82f5665bc6e43fce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** rb_itor_datum</definition>
        <argsstring>(rb_itor *itor)</argsstring>
        <name>rb_itor_datum</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="634" column="6" bodyfile="src/rb_tree.c" bodystart="634" bodyend="634"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="506" endline="510">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1afa0ed8443fddb747511d542689e9fd78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rb_itor_compare</definition>
        <argsstring>(const rb_itor *i1, const rb_itor *i2)</argsstring>
        <name>rb_itor_compare</name>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="635" column="5" bodyfile="src/rb_tree.c" bodystart="635" bodyend="635"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="486" endline="496">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="rb__tree_8c_1a5d6bd6505d2feb275514a5f70e63ffbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rb_itor_remove</definition>
        <argsstring>(rb_itor *it)</argsstring>
        <name>rb_itor_remove</name>
        <param>
          <type><ref refid="structrb__itor" kindref="compound">rb_itor</ref> *</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rb_tree.c" line="638" column="1" bodyfile="src/rb_tree.c" bodystart="638" bodyend="645"/>
        <references refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" compoundref="rb__tree_8c" startline="62">rb_itor::node</references>
        <references refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" compoundref="rb__tree_8c" startline="62">rb_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>red-black<sp/>tree<sp/>implementation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>cf.<sp/>[Cormen,<sp/>Leiserson,<sp/>and<sp/>Rivest<sp/>1990],<sp/>[Guibas<sp/>and<sp/>Sedgewick,<sp/>1978]</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rb__tree_8h" kindref="compound">rb_tree.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict__private_8h" kindref="compound">dict_private.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tree__common_8h" kindref="compound">tree_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="rb__tree_8c_1a3debd163d7696f113822817ea5f74d63" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__node" kindref="compound">rb_node</ref><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>;</highlight></codeline>
<codeline lineno="39" refid="structrb__node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__node" kindref="compound">rb_node</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="41" refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="42" refid="structrb__node_1ac8f265bed1235ac887fe760cab708f42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>intptr_t<sp/><sp/><sp/><sp/><ref refid="structrb__node_1ac8f265bed1235ac887fe760cab708f42" kindref="member">color</ref>;</highlight></codeline>
<codeline lineno="43" refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/><sp/><sp/><sp/><ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="44" refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/><sp/><sp/><sp/><ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_RED<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RB_BLACK<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARENT(node)<sp/>((rb_node*)((node)-&gt;color<sp/>&amp;<sp/>~RB_BLACK))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COLOR(node)<sp/>((node)-&gt;color<sp/>&amp;<sp/>RB_BLACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_RED(node)<sp/>(node)-&gt;color<sp/>&amp;=<sp/>(~(intptr_t)RB_BLACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_BLACK(node)<sp/>(node)-&gt;color<sp/>|=<sp/>((intptr_t)RB_BLACK)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_PARENT(node,p)<sp/>(node)-&gt;color<sp/>=<sp/>COLOR(node)<sp/>|<sp/>(intptr_t)(p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structrb__tree" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__tree" kindref="compound">rb_tree</ref><sp/>{</highlight></codeline>
<codeline lineno="58" refid="structrb__tree_1a3e0944ca8a425fcd254ca5057e885e45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" kindref="member">TREE_FIELDS</ref>(<ref refid="structrb__node" kindref="compound">rb_node</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="structrb__itor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structrb__itor" kindref="compound">rb_itor</ref><sp/>{</highlight></codeline>
<codeline lineno="62" refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" kindref="member">TREE_ITERATOR_FIELDS</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdict__vtable" kindref="compound">dict_vtable</ref><sp/>rb_tree_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad70c6127784fe473398838a4ca7ee0e8" kindref="member">dict_inew_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a2b40ed7b405e2b28271da7f26f04789b" kindref="member">rb_dict_itor_new</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a861d296c134c416c965b8e2117cda33a" kindref="member">dict_dfree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a899a658f343e50449096281e805558c6" kindref="member">rb_tree_free</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a526ec5a7be277ebf2fb509362b6b2f0c" kindref="member">dict_insert_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ab46bc504985390833fe0237386d8b8c3" kindref="member">rb_tree_insert</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab062091ed90f88e902342e2069a545ee" kindref="member">dict_search_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a03ac901668905b999c543bd504ce6049" kindref="member">dict_remove_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1adbb520715677367d143d29f4aa385adf" kindref="member">rb_tree_remove</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af10d9833546e8a985bf8a21e7cca9c39" kindref="member">dict_clear_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" kindref="member">rb_tree_clear</ref>,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a465ab0c48a0c2920bd4a4d2119dde513" kindref="member">dict_traverse_func</ref>)<sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a37dab4056fc3c5c0dd2ec82f16b83b8b" kindref="member">rb_tree_traverse</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a18186f71a497454b44c31cd4737594fc" kindref="member">dict_select_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ade69cd881303ce0c2984862383788985" kindref="member">rb_tree_select</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6c85f33ba34353d8433b41377053f882" kindref="member">dict_count_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aeb7fec8d69b3fc9802e46e7d3eae4d41" kindref="member">dict_verify_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1ab5f358cd3fc473153a486aa394367aa5" kindref="member">rb_tree_verify</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structitor__vtable" kindref="compound">itor_vtable</ref><sp/>rb_tree_itor_vtable<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1af7abde3da86249ff4c3d19f5e62e7617" kindref="member">dict_ifree_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a8be4761e630cd2a0dc3ac0d0ed0bf498" kindref="member">rb_itor_free</ref>,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a66d8fb8461e0c7c72407c33f9eb1fc92" kindref="member">dict_valid_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a1eec6338f4eb24421b4556a65dd8937f" kindref="member">rb_itor_valid</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a1fdd9cad34cc517ad72e999498333195" kindref="member">dict_invalidate_func</ref>)<sp/><sp/><ref refid="rb__tree_8c_1a49c9c4d5489be20c7bbf27ea84df4755" kindref="member">rb_itor_invalidate</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a70987d3f887eb81f7ff4fb344bf09859" kindref="member">dict_next_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" kindref="member">rb_itor_next</ref>,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad0f023b37e2af0590e30cba3ebb779bf" kindref="member">dict_prev_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" kindref="member">rb_itor_prev</ref>,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a65f11df3f83a7ffe796598fc3efead7d" kindref="member">dict_nextn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a8bae4df64ac24e53ee234ac75d5a26ec" kindref="member">rb_itor_nextn</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aaf7eb283d05ac82c2a7f32d39286c888" kindref="member">dict_prevn_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a5fafb83419257dae777857066c165da0" kindref="member">rb_itor_prevn</ref>,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a6e5c0bb6cb2131da31fdb2c1b363a734" kindref="member">dict_first_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a8461a547bf3168ff9f01081558457413" kindref="member">rb_itor_first</ref>,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1adc800add5456e9c0d9fd2f4f8f8b868f" kindref="member">dict_last_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1aafcedf2a010d97489b219694c323c90c" kindref="member">rb_itor_last</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a7969590b6825845cd1e644d05b4fa300" kindref="member">dict_key_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a139503219f165edcacbb3b5eda9206c5" kindref="member">rb_itor_key</ref>,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1aa24f05bcc6368e21bc8774eec9fb3a17" kindref="member">dict_datum_func</ref>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a8221a5aebd63a69b82f5665bc6e43fce" kindref="member">rb_itor_datum</ref>,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a659ce1ce60999d8d21ab172f7507d78e" kindref="member">rb_itor_search</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a490c25aed2c521b5996bf62d07d30bd2" kindref="member">rb_itor_search_le</ref>,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a0dfa36745fc6fb3e154fd97ed920bec5" kindref="member">rb_itor_search_lt</ref>,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a1181f9daa09876a74fe0e47048400f2a" kindref="member">rb_itor_search_ge</ref>,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ab8de90f16c288deeb67b9c67f43bed37" kindref="member">dict_isearch_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1af2c10957d138378c35f5e3ab0c398f40" kindref="member">rb_itor_search_gt</ref>,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1ad01841eadd81f6b6eb68a1809aa7c7a1" kindref="member">dict_iremove_func</ref>)<sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a5d6bd6505d2feb275514a5f70e63ffbb" kindref="member">rb_itor_remove</ref>,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="dict_8h_1a64ed8ac945518e5d17e23a5d640fc5ef" kindref="member">dict_icompare_func</ref>)<sp/><sp/><sp/><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref></highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rot_left(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rot_right(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>insert_fixup(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>delete_fixup(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>parent,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node_next(<ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node_prev(<ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*</highlight></codeline>
<codeline lineno="113" refid="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" kindref="member">rb_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(cmp_func<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref><sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*<ref refid="structtree" kindref="compound">tree</ref>));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref><sp/>=<sp/>cmp_func;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*</highlight></codeline>
<codeline lineno="128" refid="rb__tree_8c_1ad5f8e3d822b3e96bb421ee9eb90ab327" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1ad5f8e3d822b3e96bb421ee9eb90ab327" kindref="member">rb_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/>cmp_func)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict" kindref="compound">dict</ref>*<sp/>dct<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dct));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dct)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dct-&gt;<ref refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" kindref="member">_object</ref><sp/>=<sp/><ref refid="rb__tree_8c_1a185b47ec876c4da963ab7087500a1b99" kindref="member">rb_tree_new</ref>(cmp_func)))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(dct);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dct-&gt;<ref refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" kindref="member">_vtable</ref><sp/>=<sp/>&amp;rb_tree_vtable;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dct;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="rb__tree_8c_1a899a658f343e50449096281e805558c6" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a899a658f343e50449096281e805558c6" kindref="member">rb_tree_free</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" kindref="member">rb_tree_clear</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>delete_func);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(<ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a4ad0f92a0a125ce3df88cc7ad4ececb1" kindref="member">rb_tree_clear</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func)</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>||<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>?<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(delete_func)<sp/>delete_func(node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(node);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="rb__tree_8c_1a3fc548a4253c2d36b8c3a651e043ca18" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1a3fc548a4253c2d36b8c3a651e043ca18" kindref="member">rb_tree_search</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" kindref="member">tree_search</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="171" refid="rb__tree_8c_1ab85b32b2d8a460a3e7d32405c6a2e282" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1ab85b32b2d8a460a3e7d32405c6a2e282" kindref="member">rb_tree_search_le</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" kindref="member">tree_search_le</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="172" refid="rb__tree_8c_1a0395841d32563e097774d61db56196fc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1a0395841d32563e097774d61db56196fc" kindref="member">rb_tree_search_lt</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" kindref="member">tree_search_lt</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="173" refid="rb__tree_8c_1a2047044b2b501362e601b082238af365" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1a2047044b2b501362e601b082238af365" kindref="member">rb_tree_search_ge</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" kindref="member">tree_search_ge</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="174" refid="rb__tree_8c_1af4a398d3550bd9ce14ba56118cf678ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1af4a398d3550bd9ce14ba56118cf678ff" kindref="member">rb_tree_search_gt</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" kindref="member">tree_search_gt</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="177" refid="rb__tree_8c_1ab46bc504985390833fe0237386d8b8c3" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1ab46bc504985390833fe0237386d8b8c3" kindref="member">rb_tree_insert</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Quell<sp/>GCC<sp/>warning<sp/>about<sp/>uninitialized<sp/>usage.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>parent<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmp<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(key,<sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(node<sp/>=<sp/>node_new(key)))</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(node,<sp/>parent);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(node);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cmp<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>+=<sp/>insert_fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>++;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref>)<sp/>{<sp/>&amp;node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">insert_fixup(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>&amp;&amp;<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node))<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node)<sp/>==<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node))-&gt;llink)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node))-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;&amp;<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(temp)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(temp);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(node);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(node);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node)-&gt;rlink)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rotations;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(temp);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(temp);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(temp);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>temp);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rotations;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node))-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;&amp;<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(temp)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(temp);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(node);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(node);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node)-&gt;llink)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rotations;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(temp);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(temp);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(temp);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>temp);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rotations;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotations;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal">remove_node(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>out;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>||<sp/>!node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tmp;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>out-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1ab342a6196c058644c297e3c191c6e4e4" kindref="member">SWAP</ref>(node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>out-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>tmp);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>out-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>?<sp/>out-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>out-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(out);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(x,<sp/>xp);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>xp<sp/>&amp;&amp;<sp/>xp-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>out;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>*(xp<sp/>?<sp/>(xp-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>out<sp/>?<sp/>&amp;xp-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>&amp;xp-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(out)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref><sp/>&amp;&amp;<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" kindref="member">rotation_count</ref><sp/>+=<sp/>delete_fixup(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>x,<sp/>xp,<sp/>left);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(out);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>--;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="294" refid="rb__tree_8c_1adbb520715677367d143d29f4aa385adf" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1adbb520715677367d143d29f4aa385adf" kindref="member">rb_tree_remove</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" kindref="member">tree_search_node</ref>(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>key);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref>)<sp/>{<sp/>NULL,<sp/>NULL,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref><sp/>result<sp/>=<sp/>{<sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal">delete_fixup(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>parent,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>left)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>rotations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>&amp;&amp;<sp/>(node<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(parent);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);<sp/>++rotations;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(parent);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>parent<sp/>&amp;&amp;<sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>w);<sp/>++rotations;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(parent)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(parent);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);<sp/>++rotations;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>left<sp/>==<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(parent);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);<sp/>++rotations;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>))<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>parent;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(parent);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>parent<sp/>&amp;&amp;<sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_left(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>w);<sp/>++rotations;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(parent)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a7b0798d20fd81bb09bc3e095675861c1" kindref="member">SET_RED</ref>(w);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(w-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(parent);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rot_right(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>parent);<sp/>++rotations;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a469003c3eb34c060c60b111dec911d65" kindref="member">SET_BLACK</ref>(node);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rotations;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="rb__tree_8c_1abb407a4fd41a281a47515f85d963c213" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1abb407a4fd41a281a47515f85d963c213" kindref="member">rb_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a666279f96572685934714532e744718e" kindref="member">tree_count</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="380" refid="rb__tree_8c_1a07eb50c7b258fda3705f24d669bd3b20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a07eb50c7b258fda3705f24d669bd3b20" kindref="member">rb_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" kindref="member">tree_min_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="381" refid="rb__tree_8c_1a4c4fe53f8606411bfbba72be208711a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a4c4fe53f8606411bfbba72be208711a0" kindref="member">rb_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" kindref="member">tree_max_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="382" refid="rb__tree_8c_1a39beb3c1aff54da1098d4aff97172244" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a39beb3c1aff54da1098d4aff97172244" kindref="member">rb_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" kindref="member">tree_total_path_length</ref>(<ref refid="structtree" kindref="compound">tree</ref>);<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="rb__tree_8c_1a37dab4056fc3c5c0dd2ec82f16b83b8b" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a37dab4056fc3c5c0dd2ec82f16b83b8b" kindref="member">rb_tree_traverse</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>node<sp/>!=<sp/>NULL;<sp/>node<sp/>=<sp/>node_next(node))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!visit(node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>,<sp/>user_data))<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="rb__tree_8c_1ade69cd881303ce0c2984862383788985" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1ade69cd881303ce0c2984862383788985" kindref="member">rb_tree_select</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**datum)</highlight></codeline>
<codeline lineno="401"><highlight class="normal">{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref>)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datum)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref><sp/>*node;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>/<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" kindref="member">tree_node_max</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>-<sp/>1<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node_prev(node);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/><ref refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" kindref="member">tree_node_min</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(n--)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node_next(node);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*key<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(datum)</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*datum<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">rot_left(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>rlink<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>=<sp/>rlink-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(rlink-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(rlink,<sp/>parent);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>rlink;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>rlink-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(node,<sp/>rlink);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">rot_right(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>llink<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>=<sp/>llink-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(llink-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>parent<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(llink,<sp/>parent);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>*(parent<sp/>?<sp/>(parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node<sp/>?<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>:<sp/>&amp;parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>:<sp/>&amp;<ref refid="structtree" kindref="compound">tree</ref>-&gt;root)<sp/>=<sp/>llink;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>llink-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rb__tree_8c_1a76aa12fe135672434038d443b7a5743d" kindref="member">SET_PARENT</ref>(node,<sp/>llink);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*</highlight></codeline>
<codeline lineno="454"><highlight class="normal">node_new(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)</highlight></codeline>
<codeline lineno="455"><highlight class="normal">{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*node));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>((((intptr_t)node)<sp/>&amp;<sp/>1)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>malloc<sp/>returns<sp/>aligned<sp/>result.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref><sp/>=<sp/>key;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrb__node_1a56b62b74c25973b49f06895dfd600c94" kindref="member">datum</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrb__node_1ac8f265bed1235ac887fe760cab708f42" kindref="member">color</ref><sp/>=<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Also<sp/>initializes<sp/>parent<sp/>to<sp/>NULL<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*</highlight></codeline>
<codeline lineno="469"><highlight class="normal">node_next(<ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>void<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;&amp;<sp/>temp-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(temp);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*</highlight></codeline>
<codeline lineno="487"><highlight class="normal">node_prev(<ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>;<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>void<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(temp<sp/>&amp;&amp;<sp/>temp-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/><ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(temp);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">node_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node,</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>black_node_count,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>leaf_black_node_count)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(node<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node<sp/>||<sp/>parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="rb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" kindref="member">PARENT</ref>(node)<sp/>==<sp/>parent);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" kindref="member">ASSERT</ref>(parent-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref><sp/>==<sp/>node);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>(parent-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>,<sp/>node-&gt;<ref refid="structrb__node_1ab5c000aec752f2206131e183daf5efbf" kindref="member">key</ref>)<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node)<sp/>==<sp/><ref refid="rb__tree_8c_1aebf73e751fbdd4b625db308dbf04d0d2" kindref="member">RB_RED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>that<sp/>every<sp/>child<sp/>of<sp/>a<sp/>red<sp/>node<sp/>is<sp/>black.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>black_node_count++;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref><sp/>&amp;&amp;<sp/>!node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>that<sp/>each<sp/>path<sp/>to<sp/>a<sp/>leaf<sp/>contains<sp/>the<sp/>same<sp/>number<sp/>of<sp/>black<sp/>nodes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(black_node_count<sp/>==<sp/>leaf_black_node_count);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>l<sp/>=<sp/>node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>,<sp/>black_node_count,<sp/>leaf_black_node_count);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>node,<sp/>node-&gt;<ref refid="structrb__node_1a0c31e262dea8ef6bf9e7efdbbb20f6e1" kindref="member">rlink</ref>,<sp/>black_node_count,<sp/>leaf_black_node_count);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l<sp/>&amp;&amp;<sp/>r;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545" refid="rb__tree_8c_1ab5f358cd3fc473153a486aa394367aa5" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1ab5f358cd3fc473153a486aa394367aa5" kindref="member">rb_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>leaf_black_node_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="structrb__node" kindref="compound">rb_node</ref>*<sp/>node<sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>;<sp/>node;<sp/>node<sp/>=<sp/>node-&gt;<ref refid="structrb__node_1a9d12018e18c3e299b58bfe67848f2f64" kindref="member">llink</ref>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="rb__tree_8c_1ae75791dcea89e11d3f729f4bc57a2cae" kindref="member">COLOR</ref>(node)<sp/>==<sp/><ref refid="rb__tree_8c_1a9776c921e63661755728d05e55484d0b" kindref="member">RB_BLACK</ref>)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leaf_black_node_count++;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" kindref="member">VERIFY</ref>(<ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" kindref="member">count</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_verify(<ref refid="structtree" kindref="compound">tree</ref>,<sp/>NULL,<sp/><ref refid="structtree" kindref="compound">tree</ref>-&gt;<ref refid="structtree_1a462689348fa341c603f4840db1a29841" kindref="member">root</ref>,<sp/>0,<sp/>leaf_black_node_count);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*</highlight></codeline>
<codeline lineno="562" refid="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" kindref="member">rb_itor_new</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" kindref="member">tree</ref><sp/>=<sp/><ref refid="structtree" kindref="compound">tree</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*</highlight></codeline>
<codeline lineno="573" refid="rb__tree_8c_1a2b40ed7b405e2b28271da7f26f04789b" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a2b40ed7b405e2b28271da7f26f04789b" kindref="member">rb_dict_itor_new</ref>(<ref refid="structrb__tree" kindref="compound">rb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/>itor<sp/>=<sp/><ref refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" kindref="member">MALLOC</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*itor));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(itor-&gt;<ref refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" kindref="member">_itor</ref><sp/>=<sp/><ref refid="rb__tree_8c_1a5b8d3d3eb399c02c815d24bc1bc7cb35" kindref="member">rb_itor_new</ref>(<ref refid="structtree" kindref="compound">tree</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(itor);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" kindref="member">_vtable</ref><sp/>=<sp/>&amp;rb_tree_itor_vtable;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586" refid="rb__tree_8c_1a8be4761e630cd2a0dc3ac0d0ed0bf498" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a8be4761e630cd2a0dc3ac0d0ed0bf498" kindref="member">rb_itor_free</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" kindref="member">tree_iterator_free</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="587" refid="rb__tree_8c_1a1eec6338f4eb24421b4556a65dd8937f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a1eec6338f4eb24421b4556a65dd8937f" kindref="member">rb_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" kindref="member">tree_iterator_valid</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="588" refid="rb__tree_8c_1a49c9c4d5489be20c7bbf27ea84df4755" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a49c9c4d5489be20c7bbf27ea84df4755" kindref="member">rb_itor_invalidate</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/><ref refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" kindref="member">tree_iterator_invalidate</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" kindref="member">rb_itor_next</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)</highlight></codeline>
<codeline lineno="592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>=<sp/>node_next(itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" kindref="member">rb_itor_prev</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)</highlight></codeline>
<codeline lineno="600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>=<sp/>node_prev(itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="rb__tree_8c_1a8bae4df64ac24e53ee234ac75d5a26ec" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a8bae4df64ac24e53ee234ac75d5a26ec" kindref="member">rb_itor_nextn</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="rb__tree_8c_1a1d0ba0959571c5479c902f3296d1c826" kindref="member">rb_itor_next</ref>(itor))</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617" refid="rb__tree_8c_1a5fafb83419257dae777857066c165da0" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a5fafb83419257dae777857066c165da0" kindref="member">rb_itor_prevn</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="618"><highlight class="normal">{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count--)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="rb__tree_8c_1a65d14c76c4aba97977bf130846942247" kindref="member">rb_itor_prev</ref>(itor))</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itor-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="rb__tree_8c_1a8461a547bf3168ff9f01081558457413" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a8461a547bf3168ff9f01081558457413" kindref="member">rb_itor_first</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" kindref="member">tree_iterator_first</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="627" refid="rb__tree_8c_1aafcedf2a010d97489b219694c323c90c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1aafcedf2a010d97489b219694c323c90c" kindref="member">rb_itor_last</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" kindref="member">tree_iterator_last</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="628" refid="rb__tree_8c_1a659ce1ce60999d8d21ab172f7507d78e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a659ce1ce60999d8d21ab172f7507d78e" kindref="member">rb_itor_search</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" kindref="member">tree_iterator_search</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="629" refid="rb__tree_8c_1a490c25aed2c521b5996bf62d07d30bd2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a490c25aed2c521b5996bf62d07d30bd2" kindref="member">rb_itor_search_le</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" kindref="member">tree_iterator_search_le</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="630" refid="rb__tree_8c_1a0dfa36745fc6fb3e154fd97ed920bec5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a0dfa36745fc6fb3e154fd97ed920bec5" kindref="member">rb_itor_search_lt</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" kindref="member">tree_iterator_search_lt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="631" refid="rb__tree_8c_1a1181f9daa09876a74fe0e47048400f2a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1a1181f9daa09876a74fe0e47048400f2a" kindref="member">rb_itor_search_ge</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" kindref="member">tree_iterator_search_ge</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="632" refid="rb__tree_8c_1af2c10957d138378c35f5e3ab0c398f40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1af2c10957d138378c35f5e3ab0c398f40" kindref="member">rb_itor_search_gt</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" kindref="member">tree_iterator_search_gt</ref>(itor,<sp/>key);<sp/>}</highlight></codeline>
<codeline lineno="633" refid="rb__tree_8c_1a139503219f165edcacbb3b5eda9206c5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="rb__tree_8c_1a139503219f165edcacbb3b5eda9206c5" kindref="member">rb_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" kindref="member">tree_iterator_key</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="634" refid="rb__tree_8c_1a8221a5aebd63a69b82f5665bc6e43fce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><ref refid="rb__tree_8c_1a8221a5aebd63a69b82f5665bc6e43fce" kindref="member">rb_itor_datum</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>itor)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" kindref="member">tree_iterator_datum</ref>(itor);<sp/>}</highlight></codeline>
<codeline lineno="635" refid="rb__tree_8c_1afa0ed8443fddb747511d542689e9fd78" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rb__tree_8c_1afa0ed8443fddb747511d542689e9fd78" kindref="member">rb_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>i2)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" kindref="member">tree_iterator_compare</ref>(i1,<sp/>i2);<sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638" refid="rb__tree_8c_1a5d6bd6505d2feb275514a5f70e63ffbb" refkind="member"><highlight class="normal"><ref refid="rb__tree_8c_1a5d6bd6505d2feb275514a5f70e63ffbb" kindref="member">rb_itor_remove</ref>(<ref refid="structrb__itor" kindref="compound">rb_itor</ref>*<sp/>it)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!it-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>remove_node(it-&gt;<ref refid="structrb__itor_1a5131fd6ad6d9f6bb49f67571babdb5d6" kindref="member">tree</ref>,<sp/>it-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>it-&gt;<ref refid="structrb__itor_1ae49fdb9a0b8ac1940cd9fd3047488de1" kindref="member">node</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rb_tree.c"/>
  </compounddef>
</doxygen>
