<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="sp__tree_8h" kind="file" language="C++">
    <compoundname>sp_tree.h</compoundname>
    <includes refid="dict_8h" local="yes">dict.h</includes>
    <includedby refid="dict_8h" local="yes">include/dict.h</includedby>
    <includedby refid="sp__tree_8c" local="yes">src/sp_tree.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/dict.c</label>
        <link refid="dict_8c"/>
      </node>
      <node id="19">
        <label>src/dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/hashtable.c</label>
        <link refid="hashtable_8c"/>
      </node>
      <node id="6">
        <label>src/hashtable2.c</label>
        <link refid="hashtable2_8c"/>
      </node>
      <node id="8">
        <label>src/hb_tree.c</label>
        <link refid="hb__tree_8c"/>
      </node>
      <node id="10">
        <label>src/pr_tree.c</label>
        <link refid="pr__tree_8c"/>
      </node>
      <node id="12">
        <label>src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
      </node>
      <node id="14">
        <label>src/skiplist.c</label>
        <link refid="skiplist_8c"/>
      </node>
      <node id="21">
        <label>src/sp_tree.c</label>
        <link refid="sp__tree_8c"/>
      </node>
      <node id="16">
        <label>src/tr_tree.c</label>
        <link refid="tr__tree_8c"/>
      </node>
      <node id="22">
        <label>src/tree_common.c</label>
        <link refid="tree__common_8c"/>
      </node>
      <node id="23">
        <label>src/tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wb_tree.c</label>
        <link refid="wb__tree_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sp__tree_8h_1a66df5074f0fd4109225e3725574617da" prot="public" static="no">
        <type>struct <ref refid="structsp__tree" kindref="compound">sp_tree</ref></type>
        <definition>typedef struct sp_tree sp_tree</definition>
        <argsstring></argsstring>
        <name>sp_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="35" column="22" bodyfile="include/sp_tree.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sp__tree_8h_1a2139b4128c710901eefd615efab65f16" prot="public" static="no">
        <type>struct <ref refid="structsp__itor" kindref="compound">sp_itor</ref></type>
        <definition>typedef struct sp_itor sp_itor</definition>
        <argsstring></argsstring>
        <name>sp_itor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="59" column="22" bodyfile="include/sp_tree.h" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sp__tree_8h_1af46136630f838070fce5907b68ed4bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
        <definition>sp_tree * sp_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>sp_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="37" column="16" bodyfile="src/sp_tree.c" bodystart="109" bodyend="121" declfile="include/sp_tree.h" declline="37" declcolumn="16"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a0dd09f97386e0811f5cc7c7bb8c49cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * sp_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>sp_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="38" column="16" bodyfile="src/sp_tree.c" bodystart="124" bodyend="135" declfile="include/sp_tree.h" declline="38" declcolumn="16"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="sp__tree_8c_1af46136630f838070fce5907b68ed4bc5" compoundref="sp__tree_8c" startline="109" endline="121">sp_tree_new</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a815f781f80f8976dac11e4c158d3dd28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_free</definition>
        <argsstring>(sp_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>sp_tree_free</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="39" column="17" bodyfile="src/sp_tree.c" bodystart="137" bodyend="137" declfile="include/sp_tree.h" declline="39" declcolumn="17"/>
        <references refid="tree__common_8c_1a058d607ec36526c0e52cd66f853ef888" compoundref="tree__common_8c" startline="328" endline="333">tree_free</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a3b1d829d912c8ab320e8110716875950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result sp_tree_insert</definition>
        <argsstring>(sp_tree *tree, void *key)</argsstring>
        <name>sp_tree_insert</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="42" column="17" bodyfile="src/sp_tree.c" bodystart="244" bodyend="277" declfile="include/sp_tree.h" declline="42" declcolumn="17"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="sp__tree_8c" startline="55">sp_node::key</references>
        <references refid="structsp__node_1a1d6ea745e0112a6a912b8e19e3cd9c60" compoundref="sp__tree_8c" startline="55">sp_node::llink</references>
        <references refid="structsp__node_1a1c7fd5fcaab9ca7faadfacd8acc9d21b" compoundref="sp__tree_8c" startline="55">sp_node::parent</references>
        <references refid="structsp__node_1ad6ab7d8c03223fa53442e6f17f2cb1b0" compoundref="sp__tree_8c" startline="55">sp_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1afd16f76bbf820d14eb3db168136a37fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="43" column="15" bodyfile="src/sp_tree.c" bodystart="280" bodyend="299" declfile="include/sp_tree.h" declline="43" declcolumn="15"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1ab8ff652fdbe0c8bc7051aecea0fb913c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_le</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_le</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="44" column="15" bodyfile="src/sp_tree.c" bodystart="302" bodyend="311" declfile="include/sp_tree.h" declline="44" declcolumn="15"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a7ff93c1e46debc8e8673646fd2d94942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_lt</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_lt</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="45" column="15" bodyfile="src/sp_tree.c" bodystart="314" bodyend="323" declfile="include/sp_tree.h" declline="45" declcolumn="15"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1afa19a9136268d240d92f2af9e1a14565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_ge</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_ge</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="46" column="15" bodyfile="src/sp_tree.c" bodystart="326" bodyend="335" declfile="include/sp_tree.h" declline="46" declcolumn="15"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1aa87418e18b3f9985fb5bc51a2a8edb4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_tree_search_gt</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_search_gt</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="47" column="15" bodyfile="src/sp_tree.c" bodystart="338" bodyend="347" declfile="include/sp_tree.h" declline="47" declcolumn="15"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a1206d24633b21c18dc28d808a3e9b0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result sp_tree_remove</definition>
        <argsstring>(sp_tree *tree, const void *key)</argsstring>
        <name>sp_tree_remove</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="49" column="17" bodyfile="src/sp_tree.c" bodystart="375" bodyend="383" declfile="include/sp_tree.h" declline="49" declcolumn="17"/>
        <references refid="structsp__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="sp__tree_8c" startline="55">sp_node::datum</references>
        <references refid="structsp__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="sp__tree_8c" startline="55">sp_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a3c9f2eef13a5203b55d0145a1af71499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_clear</definition>
        <argsstring>(sp_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>sp_tree_clear</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="50" column="17" bodyfile="src/sp_tree.c" bodystart="138" bodyend="138" declfile="include/sp_tree.h" declline="50" declcolumn="17"/>
        <references refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" compoundref="tree__common_8c" startline="302" endline="325">tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a8608422da7970ca2fec353ec1417b33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_traverse</definition>
        <argsstring>(sp_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>sp_tree_traverse</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="51" column="17" bodyfile="src/sp_tree.c" bodystart="385" bodyend="385" declfile="include/sp_tree.h" declline="51" declcolumn="17"/>
        <references refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" compoundref="tree__common_8c" startline="252" endline="268">tree_traverse</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a4b360505e324551364c92d556fb9bebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_tree_select</definition>
        <argsstring>(sp_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>sp_tree_select</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="52" column="17" bodyfile="src/sp_tree.c" bodystart="386" bodyend="386" declfile="include/sp_tree.h" declline="52" declcolumn="17"/>
        <references refid="tree__common_8c_1aa14359a5a539fe914717663d62ab3bc2" compoundref="tree__common_8c" startline="271" endline="293">tree_select</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a9ff35e577690ce12ab6e963f5f939ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_count</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_count</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="53" column="17" bodyfile="src/sp_tree.c" bodystart="387" bodyend="387" declfile="include/sp_tree.h" declline="53" declcolumn="17"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="296" endline="299">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a4d72fa3b29ac89d45d898ecf7e4dac8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_min_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="54" column="17" bodyfile="src/sp_tree.c" bodystart="388" bodyend="388" declfile="include/sp_tree.h" declline="54" declcolumn="17"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="344" endline="348">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a7f612182b8d25714fd43dd70a264d132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_max_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="55" column="17" bodyfile="src/sp_tree.c" bodystart="389" bodyend="389" declfile="include/sp_tree.h" declline="55" declcolumn="17"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="359" endline="363">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1aeaad2a79cf2f5811d22d9027c881c0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sp_tree_total_path_length</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="56" column="17" bodyfile="src/sp_tree.c" bodystart="390" bodyend="390" declfile="include/sp_tree.h" declline="56" declcolumn="17"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="374" endline="378">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1abff88ebfaaba6159ca254c41c5f2e128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_tree_verify</definition>
        <argsstring>(const sp_tree *tree)</argsstring>
        <name>sp_tree_verify</name>
        <param>
          <type>const <ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="57" column="17" bodyfile="src/sp_tree.c" bodystart="432" bodyend="440" declfile="include/sp_tree.h" declline="57" declcolumn="17"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a4f2d401aa5cda05fc2d1f74e5ae62677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
        <definition>sp_itor * sp_itor_new</definition>
        <argsstring>(sp_tree *tree)</argsstring>
        <name>sp_itor_new</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="61" column="16" bodyfile="src/sp_tree.c" bodystart="443" bodyend="451" declfile="include/sp_tree.h" declline="61" declcolumn="16"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" compoundref="sp__tree_8c" startline="63">sp_itor::node</references>
        <references refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" compoundref="sp__tree_8c" startline="63">sp_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a7ffd78dd7a34ea39753d59a14b033e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * sp_dict_itor_new</definition>
        <argsstring>(sp_tree *tree)</argsstring>
        <name>sp_dict_itor_new</name>
        <param>
          <type><ref refid="structsp__tree" kindref="compound">sp_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="62" column="16" bodyfile="src/sp_tree.c" bodystart="454" bodyend="465" declfile="include/sp_tree.h" declline="62" declcolumn="16"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="175">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="176">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="sp__tree_8c_1a4f2d401aa5cda05fc2d1f74e5ae62677" compoundref="sp__tree_8c" startline="443" endline="451">sp_itor_new</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a0df269d6d13ae6e5d40ee396bf9739a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sp_itor_free</definition>
        <argsstring>(sp_itor *tree)</argsstring>
        <name>sp_itor_free</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="63" column="17" bodyfile="src/sp_tree.c" bodystart="467" bodyend="467" declfile="include/sp_tree.h" declline="63" declcolumn="17"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="393" endline="398">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1ab9c244698889f3b8d3a9c4fce90e1060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_valid</definition>
        <argsstring>(const sp_itor *itor)</argsstring>
        <name>sp_itor_valid</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="65" column="17" bodyfile="src/sp_tree.c" bodystart="468" bodyend="468" declfile="include/sp_tree.h" declline="65" declcolumn="17"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="381" endline="384">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a9d080146ed7720bfa237111611caa970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sp_itor_invalidate</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_invalidate</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="66" column="17" bodyfile="src/sp_tree.c" bodystart="469" bodyend="469" declfile="include/sp_tree.h" declline="66" declcolumn="17"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="387" endline="390">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a5ec031c6c4bf789b0391bce36c664dc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_next</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_next</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="67" column="17" bodyfile="src/sp_tree.c" bodystart="470" bodyend="470" declfile="include/sp_tree.h" declline="67" declcolumn="17"/>
        <references refid="tree__common_8c_1a1e3db914a6bdf103e9f7db4f78c908ae" compoundref="tree__common_8c" startline="401" endline="409">tree_iterator_next</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a37c497903825a793f867122b21efcd10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_prev</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_prev</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="68" column="17" bodyfile="src/sp_tree.c" bodystart="471" bodyend="471" declfile="include/sp_tree.h" declline="68" declcolumn="17"/>
        <references refid="tree__common_8c_1afad64b5a28a44ca544fe3f0b8011db17" compoundref="tree__common_8c" startline="412" endline="420">tree_iterator_prev</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a126590bec2cfe018ac71f3a404d2dc75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_nextn</definition>
        <argsstring>(sp_itor *itor, size_t count)</argsstring>
        <name>sp_itor_nextn</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="69" column="17" bodyfile="src/sp_tree.c" bodystart="472" bodyend="472" declfile="include/sp_tree.h" declline="69" declcolumn="17"/>
        <references refid="tree__common_8c_1a8a7b95378ac8dc696b220f073b83977c" compoundref="tree__common_8c" startline="423" endline="429">tree_iterator_nextn</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a7446bad5cb5cf66b7631f54021aad7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_prevn</definition>
        <argsstring>(sp_itor *itor, size_t count)</argsstring>
        <name>sp_itor_prevn</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="70" column="17" bodyfile="src/sp_tree.c" bodystart="473" bodyend="473" declfile="include/sp_tree.h" declline="70" declcolumn="17"/>
        <references refid="tree__common_8c_1aa54a225a4b2bfc3a6bbf73125d4dd88a" compoundref="tree__common_8c" startline="432" endline="438">tree_iterator_prevn</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1adfc0d6dba087898b99b833dff64cd75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_first</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_first</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="71" column="17" bodyfile="src/sp_tree.c" bodystart="474" bodyend="474" declfile="include/sp_tree.h" declline="71" declcolumn="17"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="441" endline="445">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a0bbc8dfb29420c2213b8a87dc38ed7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_last</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_last</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="72" column="17" bodyfile="src/sp_tree.c" bodystart="475" bodyend="475" declfile="include/sp_tree.h" declline="72" declcolumn="17"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="448" endline="452">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1afe58f8a23aa49ecf39a86410326df325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="73" column="17" bodyfile="src/sp_tree.c" bodystart="477" bodyend="477" declfile="include/sp_tree.h" declline="73" declcolumn="17"/>
        <references refid="tree__common_8c_1aeebf37a00012869c931e03dbb1047ade" compoundref="tree__common_8c" startline="455" endline="459">tree_iterator_search</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1abfa097e41a164e857fff94b297acdb68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_le</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_le</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="74" column="17" bodyfile="src/sp_tree.c" bodystart="478" bodyend="478" declfile="include/sp_tree.h" declline="74" declcolumn="17"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="462" endline="466">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1aeab0a5071187a441852424630c4e179d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_lt</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_lt</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="75" column="17" bodyfile="src/sp_tree.c" bodystart="479" bodyend="479" declfile="include/sp_tree.h" declline="75" declcolumn="17"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="469" endline="473">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a255ff56e31d60736be987136e6f5bb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_ge</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_ge</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="76" column="17" bodyfile="src/sp_tree.c" bodystart="480" bodyend="480" declfile="include/sp_tree.h" declline="76" declcolumn="17"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="476" endline="480">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1af2a87f0226e009a956acf683427d62f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_search_gt</definition>
        <argsstring>(sp_itor *itor, const void *key)</argsstring>
        <name>sp_itor_search_gt</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="77" column="17" bodyfile="src/sp_tree.c" bodystart="481" bodyend="481" declfile="include/sp_tree.h" declline="77" declcolumn="17"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="483" endline="487">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1aed4ab0ae8ace94de5cb022ddd747441a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * sp_itor_key</definition>
        <argsstring>(const sp_itor *itor)</argsstring>
        <name>sp_itor_key</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="78" column="16" bodyfile="src/sp_tree.c" bodystart="482" bodyend="482" declfile="include/sp_tree.h" declline="78" declcolumn="16"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="503" endline="507">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a124014a5870761a1e8e795bfe77386a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** sp_itor_datum</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_datum</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="79" column="15" bodyfile="src/sp_tree.c" bodystart="483" bodyend="483" declfile="include/sp_tree.h" declline="79" declcolumn="15"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="510" endline="514">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a69177491372a2140181640ac0158333a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sp_itor_compare</definition>
        <argsstring>(const sp_itor *i1, const sp_itor *i2)</argsstring>
        <name>sp_itor_compare</name>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="80" column="17" bodyfile="src/sp_tree.c" bodystart="486" bodyend="489" declfile="include/sp_tree.h" declline="80" declcolumn="17"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="490" endline="500">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="sp__tree_8h_1a6c721a662275fd9a821086f581dff7ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sp_itor_remove</definition>
        <argsstring>(sp_itor *itor)</argsstring>
        <name>sp_itor_remove</name>
        <param>
          <type><ref refid="structsp__itor" kindref="compound">sp_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/sp_tree.h" line="81" column="17" bodyfile="src/sp_tree.c" bodystart="492" bodyend="499" declfile="include/sp_tree.h" declline="81" declcolumn="17"/>
        <references refid="structsp__itor_1a60c62d8f1ba6e12c422f3e5c2bf98e32" compoundref="sp__tree_8c" startline="63">sp_itor::node</references>
        <references refid="structsp__itor_1a8bea87a779a98e21ef87ad5fe91be6f4" compoundref="sp__tree_8c" startline="63">sp_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>splay<sp/>tree<sp/>interface.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBDICT_SP_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBDICT_SP_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="dict_8h_1a0c5f0f7b40e3b3df5aaa4c5e3c874b3b" kindref="member">BEGIN_DECL</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="sp__tree_8h_1a66df5074f0fd4109225e3725574617da" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__tree" kindref="compound">sp_tree</ref><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1af46136630f838070fce5907b68ed4bc5" kindref="member">sp_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structsp__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a0dd09f97386e0811f5cc7c7bb8c49cd4" kindref="member">sp_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structsp__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a815f781f80f8976dac11e4c158d3dd28" kindref="member">sp_tree_free</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a3b1d829d912c8ab320e8110716875950" kindref="member">sp_tree_insert</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1afd16f76bbf820d14eb3db168136a37fc" kindref="member">sp_tree_search</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1ab8ff652fdbe0c8bc7051aecea0fb913c" kindref="member">sp_tree_search_le</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a7ff93c1e46debc8e8673646fd2d94942" kindref="member">sp_tree_search_lt</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1afa19a9136268d240d92f2af9e1a14565" kindref="member">sp_tree_search_ge</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1aa87418e18b3f9985fb5bc51a2a8edb4d" kindref="member">sp_tree_search_gt</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a1206d24633b21c18dc28d808a3e9b0aa" kindref="member">sp_tree_remove</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a3c9f2eef13a5203b55d0145a1af71499" kindref="member">sp_tree_clear</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a8608422da7970ca2fec353ec1417b33b" kindref="member">sp_tree_traverse</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a4b360505e324551364c92d556fb9bebb" kindref="member">sp_tree_select</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>datum);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a9ff35e577690ce12ab6e963f5f939ea6" kindref="member">sp_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a4d72fa3b29ac89d45d898ecf7e4dac8f" kindref="member">sp_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a7f612182b8d25714fd43dd70a264d132" kindref="member">sp_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1aeaad2a79cf2f5811d22d9027c881c0f8" kindref="member">sp_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1abff88ebfaaba6159ca254c41c5f2e128" kindref="member">sp_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="sp__tree_8h_1a2139b4128c710901eefd615efab65f16" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structsp__itor" kindref="compound">sp_itor</ref><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a4f2d401aa5cda05fc2d1f74e5ae62677" kindref="member">sp_itor_new</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a7ffd78dd7a34ea39753d59a14b033e14" kindref="member">sp_dict_itor_new</ref>(<ref refid="structsp__tree" kindref="compound">sp_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a0df269d6d13ae6e5d40ee396bf9739a6" kindref="member">sp_itor_free</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1ab9c244698889f3b8d3a9c4fce90e1060" kindref="member">sp_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a9d080146ed7720bfa237111611caa970" kindref="member">sp_itor_invalidate</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a5ec031c6c4bf789b0391bce36c664dc3" kindref="member">sp_itor_next</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a37c497903825a793f867122b21efcd10" kindref="member">sp_itor_prev</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a126590bec2cfe018ac71f3a404d2dc75" kindref="member">sp_itor_nextn</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a7446bad5cb5cf66b7631f54021aad7b3" kindref="member">sp_itor_prevn</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1adfc0d6dba087898b99b833dff64cd75f" kindref="member">sp_itor_first</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a0bbc8dfb29420c2213b8a87dc38ed7fb" kindref="member">sp_itor_last</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1afe58f8a23aa49ecf39a86410326df325" kindref="member">sp_itor_search</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1abfa097e41a164e857fff94b297acdb68" kindref="member">sp_itor_search_le</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1aeab0a5071187a441852424630c4e179d" kindref="member">sp_itor_search_lt</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a255ff56e31d60736be987136e6f5bb90" kindref="member">sp_itor_search_ge</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1af2a87f0226e009a956acf683427d62f1" kindref="member">sp_itor_search_gt</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1aed4ab0ae8ace94de5cb022ddd747441a" kindref="member">sp_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a124014a5870761a1e8e795bfe77386a4" kindref="member">sp_itor_datum</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a69177491372a2140181640ac0158333a" kindref="member">sp_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>i2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sp__tree_8h_1a6c721a662275fd9a821086f581dff7ec" kindref="member">sp_itor_remove</ref>(<ref refid="structsp__itor" kindref="compound">sp_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="dict_8h_1acca589e3adebef8ed4e5bed6dea40ebb" kindref="member">END_DECL</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!LIBDICT_SP_TREE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/sp_tree.h"/>
  </compounddef>
</doxygen>
