<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="hb__tree_8h" kind="file" language="C++">
    <compoundname>hb_tree.h</compoundname>
    <includes refid="dict_8h" local="yes">dict.h</includes>
    <includedby refid="dict_8h" local="yes">include/dict.h</includedby>
    <includedby refid="hb__tree_8c" local="yes">src/hb_tree.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>include/hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>include/hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>include/rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>include/skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>include/tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/dict.c</label>
        <link refid="dict_8c"/>
      </node>
      <node id="19">
        <label>src/dict_private.h</label>
        <link refid="dict__private_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/hashtable.c</label>
        <link refid="hashtable_8c"/>
      </node>
      <node id="6">
        <label>src/hashtable2.c</label>
        <link refid="hashtable2_8c"/>
      </node>
      <node id="21">
        <label>src/hb_tree.c</label>
        <link refid="hb__tree_8c"/>
      </node>
      <node id="8">
        <label>src/pr_tree.c</label>
        <link refid="pr__tree_8c"/>
      </node>
      <node id="10">
        <label>src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
      </node>
      <node id="12">
        <label>src/skiplist.c</label>
        <link refid="skiplist_8c"/>
      </node>
      <node id="14">
        <label>src/sp_tree.c</label>
        <link refid="sp__tree_8c"/>
      </node>
      <node id="16">
        <label>src/tr_tree.c</label>
        <link refid="tr__tree_8c"/>
      </node>
      <node id="22">
        <label>src/tree_common.c</label>
        <link refid="tree__common_8c"/>
      </node>
      <node id="23">
        <label>src/tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/wb_tree.c</label>
        <link refid="wb__tree_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hb__tree_8h_1a1752cf6a346e6f05b07c1ea239edbbc0" prot="public" static="no">
        <type>struct <ref refid="structhb__tree" kindref="compound">hb_tree</ref></type>
        <definition>typedef struct hb_tree hb_tree</definition>
        <argsstring></argsstring>
        <name>hb_tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="35" column="22" bodyfile="include/hb_tree.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hb__tree_8h_1a1b9cb9d629fc490252598fde0a1134b3" prot="public" static="no">
        <type>struct <ref refid="structhb__itor" kindref="compound">hb_itor</ref></type>
        <definition>typedef struct hb_itor hb_itor</definition>
        <argsstring></argsstring>
        <name>hb_itor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="59" column="22" bodyfile="include/hb_tree.h" bodystart="59" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="hb__tree_8h_1a57b5dfeb404aaf4d90547bd39751d635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
        <definition>hb_tree * hb_tree_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>hb_tree_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="37" column="16" bodyfile="src/hb_tree.c" bodystart="106" bodyend="118" declfile="include/hb_tree.h" declline="37" declcolumn="16"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a2e1c00512efdc460239efbbf3199c78e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict" kindref="compound">dict</ref> *</type>
        <definition>dict * hb_dict_new</definition>
        <argsstring>(dict_compare_func cmp_func)</argsstring>
        <name>hb_dict_new</name>
        <param>
          <type><ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref></type>
          <declname>cmp_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="38" column="16" bodyfile="src/hb_tree.c" bodystart="121" bodyend="132" declfile="include/hb_tree.h" declline="38" declcolumn="16"/>
        <references refid="structdict_1a4658ca96529d47daaf0c459afdf9cc59" compoundref="dict_8h" startline="152">dict::_object</references>
        <references refid="structdict_1acf9d1ce55b44ba41d25081c84310a031" compoundref="dict_8h" startline="153">dict::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="hb__tree_8c_1a57b5dfeb404aaf4d90547bd39751d635" compoundref="hb__tree_8c" startline="106" endline="118">hb_tree_new</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a835fc4b0757a7447a0ab302117a101a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_free</definition>
        <argsstring>(hb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>hb_tree_free</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="39" column="17" bodyfile="src/hb_tree.c" bodystart="135" bodyend="139" declfile="include/hb_tree.h" declline="39" declcolumn="17"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="hb__tree_8c_1a074911e5272be53155567b2a9631ef29" compoundref="hb__tree_8c" startline="142" endline="164">hb_tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a652cad7f3fdf92084667a6a3932f9111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></type>
        <definition>dict_insert_result hb_tree_insert</definition>
        <argsstring>(hb_tree *tree, void *key)</argsstring>
        <name>hb_tree_insert</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="42" column="17" bodyfile="src/hb_tree.c" bodystart="281" bodyend="356" declfile="include/hb_tree.h" declline="42" declcolumn="17"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structhb__node_1afef439511732fd1557216f60d140adc1" compoundref="hb__tree_8c" startline="39">hb_node::bal</references>
        <references refid="hb__tree_8c_1a754d86c01037dc99b622207561ede09b" compoundref="hb__tree_8c" startline="46">BAL_MASK</references>
        <references refid="hb__tree_8c_1a1771b2c25425cc83256948dbd89d147d" compoundref="hb__tree_8c" startline="49">BAL_NEG</references>
        <references refid="hb__tree_8c_1a0809a38686a9bcafa88d0fc05916d248" compoundref="hb__tree_8c" startline="48">BAL_POS</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structhb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="hb__tree_8c" startline="37">hb_node::datum</references>
        <references refid="structhb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="hb__tree_8c" startline="36">hb_node::key</references>
        <references refid="structhb__node_1a09a1a7c8d2b7630acdf7c7b85e084fd8" compoundref="hb__tree_8c" startline="42">hb_node::llink</references>
        <references refid="hb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" compoundref="hb__tree_8c" startline="47">PARENT</references>
        <references refid="structhb__node_1a5a83c322bc3600c9d6ad24ac42fb3da4" compoundref="hb__tree_8c" startline="40">hb_node::pptr</references>
        <references refid="structhb__node_1abd399e99e142df740ec840a54f801a8d" compoundref="hb__tree_8c" startline="43">hb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree_1adf0b2d44ac6cd97d428ec85210970b43" compoundref="tree__common_8c" startline="38">tree::rotation_count</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a171ba5671724ed9fe20bf69db56348d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_tree_search</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_search</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="43" column="15" bodyfile="src/hb_tree.c" bodystart="358" bodyend="358" declfile="include/hb_tree.h" declline="43" declcolumn="15"/>
        <references refid="tree__common_8c_1a81a92b2c7f8d6ebdeacd787d53b67055" compoundref="tree__common_8c" startline="144" endline="148">tree_search</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1ad90b85a31237dd9d0b0272b4c36a32e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_tree_search_le</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_search_le</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="44" column="15" bodyfile="src/hb_tree.c" bodystart="359" bodyend="359" declfile="include/hb_tree.h" declline="44" declcolumn="15"/>
        <references refid="tree__common_8c_1ae1ea8d32b69d63eed985f52949bb493c" compoundref="tree__common_8c" startline="170" endline="174">tree_search_le</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a0cb08de1a192929edb9e8c4db8d6f850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_tree_search_lt</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_search_lt</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="45" column="15" bodyfile="src/hb_tree.c" bodystart="360" bodyend="360" declfile="include/hb_tree.h" declline="45" declcolumn="15"/>
        <references refid="tree__common_8c_1a6f24b96ae2c229648439aa85a2895044" compoundref="tree__common_8c" startline="194" endline="198">tree_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a7076af3dfd6a6f9afdf4954ba95f1c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_tree_search_ge</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_search_ge</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="46" column="15" bodyfile="src/hb_tree.c" bodystart="361" bodyend="361" declfile="include/hb_tree.h" declline="46" declcolumn="15"/>
        <references refid="tree__common_8c_1ad6f8aff956f6f8b7f9eaebcd659506b1" compoundref="tree__common_8c" startline="221" endline="225">tree_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a4e566a851a0d4ded370c9d40e17f9177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_tree_search_gt</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_search_gt</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="47" column="15" bodyfile="src/hb_tree.c" bodystart="362" bodyend="362" declfile="include/hb_tree.h" declline="47" declcolumn="15"/>
        <references refid="tree__common_8c_1a28283925393f2eb613aa1e669f181c18" compoundref="tree__common_8c" startline="245" endline="249">tree_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a894bbf6694afbd7b9c6832caf8e9c350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></type>
        <definition>dict_remove_result hb_tree_remove</definition>
        <argsstring>(hb_tree *tree, const void *key)</argsstring>
        <name>hb_tree_remove</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="49" column="17" bodyfile="src/hb_tree.c" bodystart="453" bodyend="461" declfile="include/hb_tree.h" declline="49" declcolumn="17"/>
        <references refid="structhb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="hb__tree_8c" startline="37">hb_node::datum</references>
        <references refid="structhb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="hb__tree_8c" startline="36">hb_node::key</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a074911e5272be53155567b2a9631ef29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_clear</definition>
        <argsstring>(hb_tree *tree, dict_delete_func delete_func)</argsstring>
        <name>hb_tree_clear</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="50" column="17" bodyfile="src/hb_tree.c" bodystart="142" bodyend="164" declfile="include/hb_tree.h" declline="50" declcolumn="17"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structhb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="hb__tree_8c" startline="37">hb_node::datum</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structhb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="hb__tree_8c" startline="36">hb_node::key</references>
        <references refid="structhb__node_1a09a1a7c8d2b7630acdf7c7b85e084fd8" compoundref="hb__tree_8c" startline="42">hb_node::llink</references>
        <references refid="hb__tree_8c_1a1042a71e846badbb5768267a92bf4ccb" compoundref="hb__tree_8c" startline="47">PARENT</references>
        <references refid="structhb__node_1abd399e99e142df740ec840a54f801a8d" compoundref="hb__tree_8c" startline="43">hb_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1aca1d32ae93b08f4dce14563c05ed91a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_traverse</definition>
        <argsstring>(hb_tree *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>hb_tree_traverse</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="51" column="17" bodyfile="src/hb_tree.c" bodystart="464" bodyend="467" declfile="include/hb_tree.h" declline="51" declcolumn="17"/>
        <references refid="tree__common_8c_1a8af8d7bc05c41b6b1889714238c541e1" compoundref="tree__common_8c" startline="252" endline="268">tree_traverse</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a1ddd0c864a000666f56ce67a2bb4c673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_tree_select</definition>
        <argsstring>(hb_tree *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>hb_tree_select</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="52" column="17" bodyfile="src/hb_tree.c" bodystart="470" bodyend="495" declfile="include/hb_tree.h" declline="52" declcolumn="17"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structhb__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="hb__tree_8c" startline="37">hb_node::datum</references>
        <references refid="structhb__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="hb__tree_8c" startline="36">hb_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a5ffcf496b4d4e96cef73cffbaa9eb762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_count</definition>
        <argsstring>(const hb_tree *tree)</argsstring>
        <name>hb_tree_count</name>
        <param>
          <type>const <ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="53" column="17" bodyfile="src/hb_tree.c" bodystart="497" bodyend="497" declfile="include/hb_tree.h" declline="53" declcolumn="17"/>
        <references refid="tree__common_8c_1a666279f96572685934714532e744718e" compoundref="tree__common_8c" startline="296" endline="299">tree_count</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a632ec7cb94560ebb17f1263ff6270d9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_min_path_length</definition>
        <argsstring>(const hb_tree *tree)</argsstring>
        <name>hb_tree_min_path_length</name>
        <param>
          <type>const <ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="54" column="17" bodyfile="src/hb_tree.c" bodystart="498" bodyend="498" declfile="include/hb_tree.h" declline="54" declcolumn="17"/>
        <references refid="tree__common_8c_1a756193ba67a2786a5e4a6274a7ec170e" compoundref="tree__common_8c" startline="344" endline="348">tree_min_path_length</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a8aacfc0effde0a95a6e9e1af5f4d29c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_max_path_length</definition>
        <argsstring>(const hb_tree *tree)</argsstring>
        <name>hb_tree_max_path_length</name>
        <param>
          <type>const <ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="55" column="17" bodyfile="src/hb_tree.c" bodystart="499" bodyend="499" declfile="include/hb_tree.h" declline="55" declcolumn="17"/>
        <references refid="tree__common_8c_1abf500bf5b159c5ec35a5e0a3ff57a0e8" compoundref="tree__common_8c" startline="359" endline="363">tree_max_path_length</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1af6fdedf05c4f8b3d1667e87f347d31bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t hb_tree_total_path_length</definition>
        <argsstring>(const hb_tree *tree)</argsstring>
        <name>hb_tree_total_path_length</name>
        <param>
          <type>const <ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="56" column="17" bodyfile="src/hb_tree.c" bodystart="500" bodyend="500" declfile="include/hb_tree.h" declline="56" declcolumn="17"/>
        <references refid="tree__common_8c_1a8ff1218a16ab93160f3a922fcdf88882" compoundref="tree__common_8c" startline="374" endline="378">tree_total_path_length</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1abacf1587193dd266718afcc29a909728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_tree_verify</definition>
        <argsstring>(const hb_tree *tree)</argsstring>
        <name>hb_tree_verify</name>
        <param>
          <type>const <ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="57" column="17" bodyfile="src/hb_tree.c" bodystart="586" bodyend="592" declfile="include/hb_tree.h" declline="57" declcolumn="17"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="dict__private_8h_1a38818e3cd642f0c0737956ad568e3751" compoundref="dict__private_8h" startline="78" endline="85">VERIFY</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a3b953aabe2e0cc553e89b59d5f308607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
        <definition>hb_itor * hb_itor_new</definition>
        <argsstring>(hb_tree *tree)</argsstring>
        <name>hb_itor_new</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="61" column="16" bodyfile="src/hb_tree.c" bodystart="595" bodyend="603" declfile="include/hb_tree.h" declline="61" declcolumn="16"/>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
        <references refid="structhb__itor_1a024a8670718387a22dc8053590c48176" compoundref="hb__tree_8c" startline="56">hb_itor::tree</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a0636536d77902f633b4a7cad46bd3fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdict__itor" kindref="compound">dict_itor</ref> *</type>
        <definition>dict_itor * hb_dict_itor_new</definition>
        <argsstring>(hb_tree *tree)</argsstring>
        <name>hb_dict_itor_new</name>
        <param>
          <type><ref refid="structhb__tree" kindref="compound">hb_tree</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="62" column="16" bodyfile="src/hb_tree.c" bodystart="606" bodyend="617" declfile="include/hb_tree.h" declline="62" declcolumn="16"/>
        <references refid="structdict__itor_1a5f0e212b1ddef75495c8510a9438f377" compoundref="dict_8h" startline="175">dict_itor::_itor</references>
        <references refid="structdict__itor_1aec8a547b2b1220000757c4dfec8e7847" compoundref="dict_8h" startline="176">dict_itor::_vtable</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="hb__tree_8c_1a3b953aabe2e0cc553e89b59d5f308607" compoundref="hb__tree_8c" startline="595" endline="603">hb_itor_new</references>
        <references refid="dict__private_8h_1a7e3c05d61a56a6798627a9d576cb6b45" compoundref="dict__private_8h" startline="88">MALLOC</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a81460798e9da8681d4d030d608561005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hb_itor_free</definition>
        <argsstring>(hb_itor *tree)</argsstring>
        <name>hb_itor_free</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="63" column="17" bodyfile="src/hb_tree.c" bodystart="619" bodyend="619" declfile="include/hb_tree.h" declline="63" declcolumn="17"/>
        <references refid="tree__common_8c_1aa3a6573b092296a44a074269c8d2bc91" compoundref="tree__common_8c" startline="393" endline="398">tree_iterator_free</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a60e945547a822605b87a874fe84f36f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_valid</definition>
        <argsstring>(const hb_itor *itor)</argsstring>
        <name>hb_itor_valid</name>
        <param>
          <type>const <ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="65" column="17" bodyfile="src/hb_tree.c" bodystart="620" bodyend="620" declfile="include/hb_tree.h" declline="65" declcolumn="17"/>
        <references refid="tree__common_8c_1a64ec4cc9e72043bf93b75394d4a6b089" compoundref="tree__common_8c" startline="381" endline="384">tree_iterator_valid</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a5aa40cf9743b020d1a9096856f5ee49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hb_itor_invalidate</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_invalidate</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="66" column="17" bodyfile="src/hb_tree.c" bodystart="621" bodyend="621" declfile="include/hb_tree.h" declline="66" declcolumn="17"/>
        <references refid="tree__common_8c_1a2493acbad8b60afbc8f60e67ab30e06a" compoundref="tree__common_8c" startline="387" endline="390">tree_iterator_invalidate</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1aa03cde1152fd7f57d4dbc96082aed683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_next</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_next</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="67" column="17" bodyfile="src/hb_tree.c" bodystart="623" bodyend="627" declfile="include/hb_tree.h" declline="67" declcolumn="17"/>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a48aca16bbe563ec51a27062f383d6fdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_prev</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_prev</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="68" column="17" bodyfile="src/hb_tree.c" bodystart="629" bodyend="633" declfile="include/hb_tree.h" declline="68" declcolumn="17"/>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a713cafaac5010c272ec49b3708c134cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_nextn</definition>
        <argsstring>(hb_itor *itor, size_t count)</argsstring>
        <name>hb_itor_nextn</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="69" column="17" bodyfile="src/hb_tree.c" bodystart="635" bodyend="639" declfile="include/hb_tree.h" declline="69" declcolumn="17"/>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a9186702ffcb4a7a4cae504ccfac8f2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_prevn</definition>
        <argsstring>(hb_itor *itor, size_t count)</argsstring>
        <name>hb_itor_prevn</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="70" column="17" bodyfile="src/hb_tree.c" bodystart="641" bodyend="645" declfile="include/hb_tree.h" declline="70" declcolumn="17"/>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1ac654d5a634379b7abaa97d40110cfa8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_first</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_first</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="71" column="17" bodyfile="src/hb_tree.c" bodystart="647" bodyend="647" declfile="include/hb_tree.h" declline="71" declcolumn="17"/>
        <references refid="tree__common_8c_1a9bab181bc96dd1334ea36f0b3f647f2a" compoundref="tree__common_8c" startline="441" endline="445">tree_iterator_first</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a9089a34007439210ae1382380101e45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_last</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_last</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="72" column="17" bodyfile="src/hb_tree.c" bodystart="648" bodyend="648" declfile="include/hb_tree.h" declline="72" declcolumn="17"/>
        <references refid="tree__common_8c_1a03b78e22aed8c0dd38f96d939066239a" compoundref="tree__common_8c" startline="448" endline="452">tree_iterator_last</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a01b798d34492d3237aede0152581dcc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_search</definition>
        <argsstring>(hb_itor *itor, const void *key)</argsstring>
        <name>hb_itor_search</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="73" column="17" bodyfile="src/hb_tree.c" bodystart="649" bodyend="649" declfile="include/hb_tree.h" declline="73" declcolumn="17"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="476" endline="480">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1ab1d35c986721c07903534e75d7862a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_search_le</definition>
        <argsstring>(hb_itor *itor, const void *key)</argsstring>
        <name>hb_itor_search_le</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="74" column="17" bodyfile="src/hb_tree.c" bodystart="650" bodyend="650" declfile="include/hb_tree.h" declline="74" declcolumn="17"/>
        <references refid="tree__common_8c_1a630ac71696ac60548789b01f1e618350" compoundref="tree__common_8c" startline="462" endline="466">tree_iterator_search_le</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a4607a5422ddcea6ca429de95721d1d66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_search_lt</definition>
        <argsstring>(hb_itor *itor, const void *key)</argsstring>
        <name>hb_itor_search_lt</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="75" column="17" bodyfile="src/hb_tree.c" bodystart="651" bodyend="651" declfile="include/hb_tree.h" declline="75" declcolumn="17"/>
        <references refid="tree__common_8c_1aa83954869eda27b3488032f96a257771" compoundref="tree__common_8c" startline="469" endline="473">tree_iterator_search_lt</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a2fb84f10c1de87e756f9da059ac4849b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_search_ge</definition>
        <argsstring>(hb_itor *itor, const void *key)</argsstring>
        <name>hb_itor_search_ge</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="76" column="17" bodyfile="src/hb_tree.c" bodystart="652" bodyend="652" declfile="include/hb_tree.h" declline="76" declcolumn="17"/>
        <references refid="tree__common_8c_1ab1b92ab0d7b212e2928912a417ecb9a1" compoundref="tree__common_8c" startline="476" endline="480">tree_iterator_search_ge</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a09990b7e8fd9b889e467be431bc7ccbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_search_gt</definition>
        <argsstring>(hb_itor *itor, const void *key)</argsstring>
        <name>hb_itor_search_gt</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="77" column="17" bodyfile="src/hb_tree.c" bodystart="653" bodyend="653" declfile="include/hb_tree.h" declline="77" declcolumn="17"/>
        <references refid="tree__common_8c_1ad0892dbc05516cf35927f3802ceb0073" compoundref="tree__common_8c" startline="483" endline="487">tree_iterator_search_gt</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1aa9e522dab4ef7c220d12755cc387bacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * hb_itor_key</definition>
        <argsstring>(const hb_itor *itor)</argsstring>
        <name>hb_itor_key</name>
        <param>
          <type>const <ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="78" column="16" bodyfile="src/hb_tree.c" bodystart="655" bodyend="655" declfile="include/hb_tree.h" declline="78" declcolumn="16"/>
        <references refid="tree__common_8c_1a71fd87b638317045ae986d9886f10c10" compoundref="tree__common_8c" startline="503" endline="507">tree_iterator_key</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a9fb076b58a4435f4cd696b845ed78909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** hb_itor_datum</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_datum</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="79" column="15" bodyfile="src/hb_tree.c" bodystart="656" bodyend="656" declfile="include/hb_tree.h" declline="79" declcolumn="15"/>
        <references refid="tree__common_8c_1a1cc4c18adcfc606676bbbe632160f50a" compoundref="tree__common_8c" startline="510" endline="514">tree_iterator_datum</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a8e1e16fbe55e6aaf652fcd284edfdbcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hb_itor_compare</definition>
        <argsstring>(const hb_itor *i1, const hb_itor *i2)</argsstring>
        <name>hb_itor_compare</name>
        <param>
          <type>const <ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="80" column="17" bodyfile="src/hb_tree.c" bodystart="654" bodyend="654" declfile="include/hb_tree.h" declline="80" declcolumn="17"/>
        <references refid="tree__common_8c_1a32b8464955ebce9c4f8967162f01f50b" compoundref="tree__common_8c" startline="490" endline="500">tree_iterator_compare</references>
      </memberdef>
      <memberdef kind="function" id="hb__tree_8h_1a7f741c2750a9b76c98f2c308c1da96cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool hb_itor_remove</definition>
        <argsstring>(hb_itor *itor)</argsstring>
        <name>hb_itor_remove</name>
        <param>
          <type><ref refid="structhb__itor" kindref="compound">hb_itor</ref> *</type>
          <declname>itor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/hb_tree.h" line="81" column="17" bodyfile="src/hb_tree.c" bodystart="659" bodyend="666" declfile="include/hb_tree.h" declline="81" declcolumn="17"/>
        <references refid="structhb__itor_1abd1d99b37abe63189d6db6eb630bd2ff" compoundref="hb__tree_8c" startline="56">hb_itor::node</references>
        <references refid="structhb__itor_1a024a8670718387a22dc8053590c48176" compoundref="hb__tree_8c" startline="56">hb_itor::tree</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>--<sp/>height-balanced<sp/>(AVL)<sp/>tree<sp/>interface.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBDICT_HB_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBDICT_HB_TREE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="dict_8h_1a0c5f0f7b40e3b3df5aaa4c5e3c874b3b" kindref="member">BEGIN_DECL</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="hb__tree_8h_1a1752cf6a346e6f05b07c1ea239edbbc0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhb__tree" kindref="compound">hb_tree</ref><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a57b5dfeb404aaf4d90547bd39751d635" kindref="member">hb_tree_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structhb__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="structdict" kindref="compound">dict</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a2e1c00512efdc460239efbbf3199c78e" kindref="member">hb_dict_new</ref>(<ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref><sp/><ref refid="structhb__tree_1a3e0944ca8a425fcd254ca5057e885e45" kindref="member">cmp_func</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a835fc4b0757a7447a0ab302117a101a4" kindref="member">hb_tree_free</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="structdict__insert__result" kindref="compound">dict_insert_result</ref></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a652cad7f3fdf92084667a6a3932f9111" kindref="member">hb_tree_insert</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a171ba5671724ed9fe20bf69db56348d6" kindref="member">hb_tree_search</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1ad90b85a31237dd9d0b0272b4c36a32e0" kindref="member">hb_tree_search_le</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a0cb08de1a192929edb9e8c4db8d6f850" kindref="member">hb_tree_search_lt</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a7076af3dfd6a6f9afdf4954ba95f1c5c" kindref="member">hb_tree_search_ge</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a4e566a851a0d4ded370c9d40e17f9177" kindref="member">hb_tree_search_gt</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="structdict__remove__result" kindref="compound">dict_remove_result</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a894bbf6694afbd7b9c6832caf8e9c350" kindref="member">hb_tree_remove</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a074911e5272be53155567b2a9631ef29" kindref="member">hb_tree_clear</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1aca1d32ae93b08f4dce14563c05ed91a7" kindref="member">hb_tree_traverse</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a1ddd0c864a000666f56ce67a2bb4c673" kindref="member">hb_tree_select</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>datum);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a5ffcf496b4d4e96cef73cffbaa9eb762" kindref="member">hb_tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a632ec7cb94560ebb17f1263ff6270d9d" kindref="member">hb_tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a8aacfc0effde0a95a6e9e1af5f4d29c2" kindref="member">hb_tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1af6fdedf05c4f8b3d1667e87f347d31bb" kindref="member">hb_tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1abacf1587193dd266718afcc29a909728" kindref="member">hb_tree_verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="hb__tree_8h_1a1b9cb9d629fc490252598fde0a1134b3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhb__itor" kindref="compound">hb_itor</ref><sp/><ref refid="structhb__itor" kindref="compound">hb_itor</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a3b953aabe2e0cc553e89b59d5f308607" kindref="member">hb_itor_new</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="structdict__itor" kindref="compound">dict_itor</ref>*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a0636536d77902f633b4a7cad46bd3fed" kindref="member">hb_dict_itor_new</ref>(<ref refid="structhb__tree" kindref="compound">hb_tree</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a81460798e9da8681d4d030d608561005" kindref="member">hb_itor_free</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/><ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a60e945547a822605b87a874fe84f36f9" kindref="member">hb_itor_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a5aa40cf9743b020d1a9096856f5ee49d" kindref="member">hb_itor_invalidate</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1aa03cde1152fd7f57d4dbc96082aed683" kindref="member">hb_itor_next</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a48aca16bbe563ec51a27062f383d6fdb" kindref="member">hb_itor_prev</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a713cafaac5010c272ec49b3708c134cd" kindref="member">hb_itor_nextn</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a9186702ffcb4a7a4cae504ccfac8f2ec" kindref="member">hb_itor_prevn</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1ac654d5a634379b7abaa97d40110cfa8e" kindref="member">hb_itor_first</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a9089a34007439210ae1382380101e45a" kindref="member">hb_itor_last</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a01b798d34492d3237aede0152581dcc1" kindref="member">hb_itor_search</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1ab1d35c986721c07903534e75d7862a3b" kindref="member">hb_itor_search_le</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a4607a5422ddcea6ca429de95721d1d66" kindref="member">hb_itor_search_lt</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a2fb84f10c1de87e756f9da059ac4849b" kindref="member">hb_itor_search_ge</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a09990b7e8fd9b889e467be431bc7ccbd" kindref="member">hb_itor_search_gt</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>key);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1aa9e522dab4ef7c220d12755cc387bacf" kindref="member">hb_itor_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a9fb076b58a4435f4cd696b845ed78909" kindref="member">hb_itor_datum</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a8e1e16fbe55e6aaf652fcd284edfdbcc" kindref="member">hb_itor_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>i1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>i2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hb__tree_8h_1a7f741c2750a9b76c98f2c308c1da96cb" kindref="member">hb_itor_remove</ref>(<ref refid="structhb__itor" kindref="compound">hb_itor</ref>*<sp/>itor);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="dict_8h_1acca589e3adebef8ed4e5bed6dea40ebb" kindref="member">END_DECL</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!LIBDICT_HB_TREE_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/hb_tree.h"/>
  </compounddef>
</doxygen>
