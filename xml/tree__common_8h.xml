<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="tree__common_8h" kind="file" language="C++">
    <compoundname>tree_common.h</compoundname>
    <includes refid="dict_8h" local="yes">dict.h</includes>
    <includedby refid="hb__tree_8c" local="yes">src/hb_tree.c</includedby>
    <includedby refid="pr__tree_8c" local="yes">src/pr_tree.c</includedby>
    <includedby refid="rb__tree_8c" local="yes">src/rb_tree.c</includedby>
    <includedby refid="sp__tree_8c" local="yes">src/sp_tree.c</includedby>
    <includedby refid="tr__tree_8c" local="yes">src/tr_tree.c</includedby>
    <includedby refid="tree__common_8c" local="yes">src/tree_common.c</includedby>
    <includedby refid="wb__tree_8c" local="yes">src/wb_tree.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>dict.h</label>
        <link refid="dict_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>hashtable.h</label>
        <link refid="hashtable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>hashtable2.h</label>
        <link refid="hashtable2_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hb_tree.h</label>
        <link refid="hb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pr_tree.h</label>
        <link refid="pr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>rb_tree.h</label>
        <link refid="rb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>skiplist.h</label>
        <link refid="skiplist_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>sp_tree.h</label>
        <link refid="sp__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>tr_tree.h</label>
        <link refid="tr__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>wb_tree.h</label>
        <link refid="wb__tree_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/hb_tree.c</label>
        <link refid="hb__tree_8c"/>
      </node>
      <node id="3">
        <label>src/pr_tree.c</label>
        <link refid="pr__tree_8c"/>
      </node>
      <node id="4">
        <label>src/rb_tree.c</label>
        <link refid="rb__tree_8c"/>
      </node>
      <node id="5">
        <label>src/sp_tree.c</label>
        <link refid="sp__tree_8c"/>
      </node>
      <node id="6">
        <label>src/tr_tree.c</label>
        <link refid="tr__tree_8c"/>
      </node>
      <node id="7">
        <label>src/tree_common.c</label>
        <link refid="tree__common_8c"/>
      </node>
      <node id="1">
        <label>src/tree_common.h</label>
        <link refid="tree__common_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/wb_tree.c</label>
        <link refid="wb__tree_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtree__node__base" prot="public">tree_node_base</innerclass>
    <innerclass refid="structtree__base" prot="public">tree_base</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" prot="public" static="no">
        <name>TREE_NODE_FIELDS</name>
        <param><defname>node_type</defname></param>
        <initializer>    void*       key; \
    void*       datum; \
    node_type*  parent; \
    node_type*  llink; \
    node_type*  rlink</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="33" column="9" bodyfile="src/tree_common.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="define" id="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" prot="public" static="no">
        <name>TREE_FIELDS</name>
        <param><defname>node_type</defname></param>
        <initializer>    node_type*          root; \
    size_t              count; \
    <ref refid="dict_8h_1a1704b677563c3195fcc69dbc42ff8704" kindref="member">dict_compare_func</ref>   cmp_func; \
    size_t              rotation_count</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="44" column="9" bodyfile="src/tree_common.h" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="define" id="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" prot="public" static="no">
        <name>TREE_ITERATOR_FIELDS</name>
        <param><defname>tree_type</defname></param>
        <param><defname>node_type</defname></param>
        <initializer>    tree_type*  <ref refid="structtree" kindref="compound">tree</ref>; \
    node_type*  node</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="54" column="9" bodyfile="src/tree_common.h" bodystart="54" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tree__common_8h_1a9069a8899a6e1ad0d0facc4644961b6e" prot="public" static="no">
        <type>struct <ref refid="structtree__node__base" kindref="compound">tree_node_base</ref></type>
        <definition>typedef struct tree_node_base tree_node_base</definition>
        <argsstring></argsstring>
        <name>tree_node_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="42" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="tree__common_8h_1acc8b5e2dfeccc10ebe77ddffb5d84708" prot="public" static="no">
        <type>struct <ref refid="structtree__base" kindref="compound">tree_base</ref></type>
        <definition>typedef struct tree_base tree_base</definition>
        <argsstring></argsstring>
        <name>tree_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="52" column="11"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="tree__common_8h_1a984b8c466ba0ffa7b9eac4a6b2586849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_node_rot_left</definition>
        <argsstring>(void *tree, void *node)</argsstring>
        <name>tree_node_rot_left</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="60" column="9" bodyfile="src/tree_common.c" bodystart="46" bodyend="59" declfile="src/tree_common.h" declline="60" declcolumn="9"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a2881f1f967eee56db7a80caddc614c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_node_rot_right</definition>
        <argsstring>(void *tree, void *node)</argsstring>
        <name>tree_node_rot_right</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="63" column="9" bodyfile="src/tree_common.c" bodystart="62" bodyend="75" declfile="src/tree_common.h" declline="63" declcolumn="9"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a90e4160ff37de7247b611782efafba65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_prev</definition>
        <argsstring>(void *node)</argsstring>
        <name>tree_node_prev</name>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="66" column="8" bodyfile="src/tree_common.c" bodystart="78" bodyend="89" declfile="src/tree_common.h" declline="66" declcolumn="8"/>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1aa36c6127ed2f7bef26f000da64f05e20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_next</definition>
        <argsstring>(void *node)</argsstring>
        <name>tree_node_next</name>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="69" column="8" bodyfile="src/tree_common.c" bodystart="92" bodyend="103" declfile="src/tree_common.h" declline="69" declcolumn="8"/>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1adde7c25179e77fd991a879a1cab795ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_min</definition>
        <argsstring>(void *node)</argsstring>
        <name>tree_node_min</name>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="72" column="8" bodyfile="src/tree_common.c" bodystart="106" bodyend="114" declfile="src/tree_common.h" declline="72" declcolumn="8"/>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a4ce2ec2b8d2273572d9193559a62b5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_node_max</definition>
        <argsstring>(void *node)</argsstring>
        <name>tree_node_max</name>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="75" column="8" bodyfile="src/tree_common.c" bodystart="117" bodyend="125" declfile="src/tree_common.h" declline="75" declcolumn="8"/>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a7765b89cd139c6c938b44f272738be55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="77" column="7" bodyfile="src/tree_common.c" bodystart="144" bodyend="148" declfile="src/tree_common.h" declline="77" declcolumn="7"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a28e378870f0efa0b15fd3f8c8141abd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_node</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_node</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="79" column="8" bodyfile="src/tree_common.c" bodystart="128" bodyend="141" declfile="src/tree_common.h" declline="79" declcolumn="8"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a834572fa63706dc9a9cfa4267e07eb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_le</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_le</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="82" column="7" bodyfile="src/tree_common.c" bodystart="170" bodyend="174" declfile="src/tree_common.h" declline="82" declcolumn="7"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1acf04110b9a2494c4ea91b5f960478e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_le_node</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_le_node</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="83" column="8" bodyfile="src/tree_common.c" bodystart="151" bodyend="167" declfile="src/tree_common.h" declline="83" declcolumn="8"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a1fc9e462ca58e9d12d81e9e1f77e640d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_lt</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_lt</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="86" column="7" bodyfile="src/tree_common.c" bodystart="194" bodyend="198" declfile="src/tree_common.h" declline="86" declcolumn="7"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ac2b03ab7859c7c7c48f32b7b8d40a4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_lt_node</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_lt_node</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="87" column="8" bodyfile="src/tree_common.c" bodystart="177" bodyend="191" declfile="src/tree_common.h" declline="87" declcolumn="8"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1af6ed3a63a9c60907953d2746a3a1b8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_ge</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_ge</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="90" column="7" bodyfile="src/tree_common.c" bodystart="221" bodyend="225" declfile="src/tree_common.h" declline="90" declcolumn="7"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a7ef6f4a68ff6cba269988aeba2a66a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_ge_node</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_ge_node</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="91" column="8" bodyfile="src/tree_common.c" bodystart="201" bodyend="218" declfile="src/tree_common.h" declline="91" declcolumn="8"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a8b3a3c169d964c62302581f5d85ac004" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_search_gt</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_gt</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="94" column="7" bodyfile="src/tree_common.c" bodystart="245" bodyend="249" declfile="src/tree_common.h" declline="94" declcolumn="7"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a68a8285626f8ca19aa5028d8db8c1c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * tree_search_gt_node</definition>
        <argsstring>(void *tree, const void *key)</argsstring>
        <name>tree_search_gt_node</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="95" column="8" bodyfile="src/tree_common.c" bodystart="228" bodyend="242" declfile="src/tree_common.h" declline="95" declcolumn="8"/>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a62fef1416dee2635ca075d5d9a519c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_traverse</definition>
        <argsstring>(void *tree, dict_visit_func visit, void *user_data)</argsstring>
        <name>tree_traverse</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref></type>
          <declname>visit</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="99" column="9" bodyfile="src/tree_common.c" bodystart="252" bodyend="268" declfile="src/tree_common.h" declline="99" declcolumn="9"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ac144b757fd8ecdeab9e1ae4d31dd92e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_select</definition>
        <argsstring>(void *tree, size_t n, const void **key, void **datum)</argsstring>
        <name>tree_select</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>datum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="103" column="9" bodyfile="src/tree_common.c" bodystart="271" bodyend="293" declfile="src/tree_common.h" declline="103" declcolumn="9"/>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ad7192e6cc9305bd387a2de989dbe0c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_count</definition>
        <argsstring>(const void *tree)</argsstring>
        <name>tree_count</name>
        <param>
          <type>const void *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="105" column="9" bodyfile="src/tree_common.c" bodystart="296" bodyend="299" declfile="src/tree_common.h" declline="105" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a883af43dc54a56d18fd30bee2104ba85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_clear</definition>
        <argsstring>(void *tree, dict_delete_func delete_func)</argsstring>
        <name>tree_clear</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="107" column="9" bodyfile="src/tree_common.c" bodystart="302" bodyend="325" declfile="src/tree_common.h" declline="107" declcolumn="9"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a76d971a3c552bc58ba9f0d5fceae9806" compoundref="tree__common_8c" startline="38">tree::count</references>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__node_1ad05ecdb82a6038d4bf5aaa7eac22fbd3" compoundref="tree__common_8c" startline="34">tree_node::llink</references>
        <references refid="structtree__node_1a1b14b7d0565271b34732a5c6fd7b79c4" compoundref="tree__common_8c" startline="34">tree_node::parent</references>
        <references refid="structtree__node_1a385f2b6c9d6fbb5c5f1b9b26d5e64267" compoundref="tree__common_8c" startline="34">tree_node::rlink</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a29602ed18f6d0a7db2b9c37d6fa0368b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_free</definition>
        <argsstring>(void *tree, dict_delete_func delete_func)</argsstring>
        <name>tree_free</name>
        <param>
          <type>void *</type>
          <declname>tree</declname>
        </param>
        <param>
          <type><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref></type>
          <declname>delete_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="109" column="9" bodyfile="src/tree_common.c" bodystart="328" bodyend="333" declfile="src/tree_common.h" declline="109" declcolumn="9"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="tree__common_8c_1a6fbd46e35ff34bda38574a440b879dc1" compoundref="tree__common_8c" startline="302" endline="325">tree_clear</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a2afc6479b48b15341653535d1c09b23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_min_path_length</definition>
        <argsstring>(const void *tree)</argsstring>
        <name>tree_min_path_length</name>
        <param>
          <type>const void *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="111" column="9" bodyfile="src/tree_common.c" bodystart="344" bodyend="348" declfile="src/tree_common.h" declline="111" declcolumn="9"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a70efe1dab1d7e921660d1df4dfbbdd03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_max_path_length</definition>
        <argsstring>(const void *tree)</argsstring>
        <name>tree_max_path_length</name>
        <param>
          <type>const void *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="113" column="9" bodyfile="src/tree_common.c" bodystart="359" bodyend="363" declfile="src/tree_common.h" declline="113" declcolumn="9"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ad8bd4c384ca20067d07d7ac261a670ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tree_total_path_length</definition>
        <argsstring>(const void *tree)</argsstring>
        <name>tree_total_path_length</name>
        <param>
          <type>const void *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="115" column="9" bodyfile="src/tree_common.c" bodystart="374" bodyend="378" declfile="src/tree_common.h" declline="115" declcolumn="9"/>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a007c77730e99ae192e34ba18399f0456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_valid</definition>
        <argsstring>(const void *iterator)</argsstring>
        <name>tree_iterator_valid</name>
        <param>
          <type>const void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="117" column="13" bodyfile="src/tree_common.c" bodystart="381" bodyend="384" declfile="src/tree_common.h" declline="117" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ad3ee7c4e1533726f211e78e559ce5398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_iterator_invalidate</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_invalidate</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="118" column="13" bodyfile="src/tree_common.c" bodystart="387" bodyend="390" declfile="src/tree_common.h" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a25e867d4c0d4447e6c0b0838aa311e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tree_iterator_free</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_free</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="119" column="13" bodyfile="src/tree_common.c" bodystart="393" bodyend="398" declfile="src/tree_common.h" declline="119" declcolumn="13"/>
        <references refid="dict__private_8h_1a02048bf846e8bc87e3ce188e4957ef06" compoundref="dict__private_8h" startline="89">FREE</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a43963be9eade744b2d3a77914e4e20a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_next</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_next</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="120" column="13" bodyfile="src/tree_common.c" bodystart="401" bodyend="409" declfile="src/tree_common.h" declline="120" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a56eed6b63ed322aa656ba02e845a2caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_prev</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_prev</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="121" column="13" bodyfile="src/tree_common.c" bodystart="412" bodyend="420" declfile="src/tree_common.h" declline="121" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a4e54c33bf8c8429421ef698f049ff46c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_nextn</definition>
        <argsstring>(void *iterator, size_t count)</argsstring>
        <name>tree_iterator_nextn</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="122" column="13" bodyfile="src/tree_common.c" bodystart="423" bodyend="429" declfile="src/tree_common.h" declline="122" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1af61f08f021d60815449e7657dc75ea6a" compoundref="tree__common_8c" startline="92" endline="103">tree_node_next</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a8be1329ad6b7d656cc29bcca4e8e3b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_prevn</definition>
        <argsstring>(void *iterator, size_t count)</argsstring>
        <name>tree_iterator_prevn</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="123" column="13" bodyfile="src/tree_common.c" bodystart="432" bodyend="438" declfile="src/tree_common.h" declline="123" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="tree__common_8c_1aad7c42c6dfa4a11176cff91f41c9383a" compoundref="tree__common_8c" startline="78" endline="89">tree_node_prev</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a76a5215d5dad8de31b36ad11350770f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_first</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_first</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="124" column="13" bodyfile="src/tree_common.c" bodystart="441" bodyend="445" declfile="src/tree_common.h" declline="124" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a7b6de5488b23a09de4f838c218adabd0" compoundref="tree__common_8c" startline="106" endline="114">tree_node_min</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ab9329d4cf4317f2ddd9f46f967bb1d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_last</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_last</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="125" column="13" bodyfile="src/tree_common.c" bodystart="448" bodyend="452" declfile="src/tree_common.h" declline="125" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree_1a462689348fa341c603f4840db1a29841" compoundref="tree__common_8c" startline="38">tree::root</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a1f73b77d5b43f77f45ba24acdbe83faf" compoundref="tree__common_8c" startline="117" endline="125">tree_node_max</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ae475a957640b2a7fda1c7a803590a55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search</definition>
        <argsstring>(void *iterator, const void *key)</argsstring>
        <name>tree_iterator_search</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="126" column="13" bodyfile="src/tree_common.c" bodystart="455" bodyend="459" declfile="src/tree_common.h" declline="126" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a4336bbd1dec56af86a45e1d84d622063" compoundref="tree__common_8c" startline="128" endline="141">tree_search_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1aca4d6919c69c59b77effed9746350ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_le</definition>
        <argsstring>(void *iterator, const void *key)</argsstring>
        <name>tree_iterator_search_le</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="127" column="13" bodyfile="src/tree_common.c" bodystart="462" bodyend="466" declfile="src/tree_common.h" declline="127" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a1e5a4773127f62034080c522c657c5d1" compoundref="tree__common_8c" startline="151" endline="167">tree_search_le_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1acd2643e69cd70b24ab68157c88d89150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_lt</definition>
        <argsstring>(void *iterator, const void *key)</argsstring>
        <name>tree_iterator_search_lt</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="128" column="13" bodyfile="src/tree_common.c" bodystart="469" bodyend="473" declfile="src/tree_common.h" declline="128" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a645c577b5288a0d739610bca51a82e22" compoundref="tree__common_8c" startline="177" endline="191">tree_search_lt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a8731f9d60ea044a8b79ed90fe1b25a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_ge</definition>
        <argsstring>(void *iterator, const void *key)</argsstring>
        <name>tree_iterator_search_ge</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="129" column="13" bodyfile="src/tree_common.c" bodystart="476" bodyend="480" declfile="src/tree_common.h" declline="129" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1aec6b09ca1b7597db7cb5a5389153f598" compoundref="tree__common_8c" startline="201" endline="218">tree_search_ge_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1ab419689d410592ac34ff9b00b7977096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tree_iterator_search_gt</definition>
        <argsstring>(void *iterator, const void *key)</argsstring>
        <name>tree_iterator_search_gt</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="130" column="13" bodyfile="src/tree_common.c" bodystart="483" bodyend="487" declfile="src/tree_common.h" declline="130" declcolumn="13"/>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
        <references refid="tree__common_8c_1a083987581cc9832ac2e13c1047b6f0f3" compoundref="tree__common_8c" startline="228" endline="242">tree_search_gt_node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1abf1de1d71e92df79cd1b0cee24465c27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tree_iterator_compare</definition>
        <argsstring>(const void *iterator1, const void *iterator2)</argsstring>
        <name>tree_iterator_compare</name>
        <param>
          <type>const void *</type>
          <declname>iterator1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>iterator2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="131" column="13" bodyfile="src/tree_common.c" bodystart="490" bodyend="500" declfile="src/tree_common.h" declline="131" declcolumn="13"/>
        <references refid="dict__private_8h_1a28301f76c53b643912da7c538f74e2c6" compoundref="dict__private_8h" startline="51" endline="58">ASSERT</references>
        <references refid="structtree_1a3e0944ca8a425fcd254ca5057e885e45" compoundref="tree__common_8c" startline="38">tree::cmp_func</references>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
        <references refid="structtree__iterator_1a8346285c2813f7eb001599a6616df9ab" compoundref="tree__common_8c" startline="42">tree_iterator::tree</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1aaa46faf126d94dfa7dd33fe9db363f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * tree_iterator_key</definition>
        <argsstring>(const void *iterator)</argsstring>
        <name>tree_iterator_key</name>
        <param>
          <type>const void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="132" column="12" bodyfile="src/tree_common.c" bodystart="503" bodyend="507" declfile="src/tree_common.h" declline="132" declcolumn="12"/>
        <references refid="structtree__node_1ab5c000aec752f2206131e183daf5efbf" compoundref="tree__common_8c" startline="34">tree_node::key</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
      <memberdef kind="function" id="tree__common_8h_1a192415adccccf2fd72ed144ffec4cac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void ** tree_iterator_datum</definition>
        <argsstring>(void *iterator)</argsstring>
        <name>tree_iterator_datum</name>
        <param>
          <type>void *</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tree_common.h" line="133" column="11" bodyfile="src/tree_common.c" bodystart="510" bodyend="514" declfile="src/tree_common.h" declline="133" declcolumn="11"/>
        <references refid="structtree__node_1a56b62b74c25973b49f06895dfd600c94" compoundref="tree__common_8c" startline="34">tree_node::datum</references>
        <references refid="structtree__iterator_1a3fb7c06515f16af7c11e07e7a3dd4813" compoundref="tree__common_8c" startline="42">tree_iterator::node</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libdict<sp/>-<sp/>common<sp/>definitions<sp/>for<sp/>binary<sp/>search<sp/>trees.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2001-2014,<sp/>Farooq<sp/>Mela</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBDICT_TREE_COMMON_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBDICT_TREE_COMMON_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dict_8h" kindref="compound">dict.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TREE_NODE_FIELDS(node_type)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>key;<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>datum;<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>node_type*<sp/><sp/>parent;<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>node_type*<sp/><sp/>llink;<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>node_type*<sp/><sp/>rlink</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structtree__node__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree__node__base" kindref="compound">tree_node_base</ref><sp/>{</highlight></codeline>
<codeline lineno="41" refid="structtree__node__base_1a56b62b74c25973b49f06895dfd600c94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8bf6d3b26e824be81b856b68ff0ceed1" kindref="member">TREE_NODE_FIELDS</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtree__node__base" kindref="compound">tree_node_base</ref>);</highlight></codeline>
<codeline lineno="42" refid="tree__common_8h_1a9069a8899a6e1ad0d0facc4644961b6e" refkind="member"><highlight class="normal">}<sp/><ref refid="structtree__node__base" kindref="compound">tree_node_base</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TREE_FIELDS(node_type)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>node_type*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root;<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count;<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>dict_compare_func<sp/><sp/><sp/>cmp_func;<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation_count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structtree__base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtree__base" kindref="compound">tree_base</ref><sp/>{</highlight></codeline>
<codeline lineno="51" refid="structtree__base_1a3e0944ca8a425fcd254ca5057e885e45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab336de7dac2bbab532f41737fa8f103d" kindref="member">TREE_FIELDS</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtree__node__base" kindref="compound">tree_node_base</ref>);</highlight></codeline>
<codeline lineno="52" refid="tree__common_8h_1acc8b5e2dfeccc10ebe77ddffb5d84708" refkind="member"><highlight class="normal">}<sp/><ref refid="structtree__base" kindref="compound">tree_base</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="tree__common_8h_1aaa3336561dab3f71e234b679290eb7d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TREE_ITERATOR_FIELDS(tree_type,<sp/>node_type)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>tree_type*<sp/><sp/>tree;<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>node_type*<sp/><sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Rotate<sp/>|node|<sp/>left.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>|node|<sp/>and<sp/>|node-&gt;rlink|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a984b8c466ba0ffa7b9eac4a6b2586849" kindref="member">tree_node_rot_left</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Rotate<sp/>|node|<sp/>right.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>|node|<sp/>and<sp/>|node-&gt;llink|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a2881f1f967eee56db7a80caddc614c8e" kindref="member">tree_node_rot_right</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>predecessor<sp/>of<sp/>|node|,<sp/>or<sp/>NULL<sp/>if<sp/>|node|<sp/>has<sp/>no<sp/>predecessor.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>|node|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1a90e4160ff37de7247b611782efafba65" kindref="member">tree_node_prev</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>successor<sp/>of<sp/>|node|,<sp/>or<sp/>NULL<sp/>if<sp/>|node|<sp/>has<sp/>no<sp/>successor.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>|node|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1aa36c6127ed2f7bef26f000da64f05e20" kindref="member">tree_node_next</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>left<sp/>child<sp/>of<sp/>|node|,<sp/>or<sp/>|node|<sp/>if<sp/>it<sp/>has<sp/>no<sp/>right<sp/>child.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>|node|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1adde7c25179e77fd991a879a1cab795ff" kindref="member">tree_node_min</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>rightmost<sp/>child<sp/>of<sp/>|node|,<sp/>or<sp/>|node|<sp/>if<sp/>it<sp/>has<sp/>no<sp/>right<sp/>child.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>|node|<sp/>must<sp/>not<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1a4ce2ec2b8d2273572d9193559a62b5a3" kindref="member">tree_node_max</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*node);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>address<sp/>of<sp/>the<sp/>data<sp/>for<sp/>the<sp/>given<sp/>the<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><ref refid="tree__common_8h_1a7765b89cd139c6c938b44f272738be55" kindref="member">tree_search</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>node<sp/>has<sp/>the<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1a28e378870f0efa0b15fd3f8c8141abd3" kindref="member">tree_search_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>data/node<sp/>associated<sp/>with<sp/>the<sp/>first<sp/>key<sp/>less<sp/>than<sp/>or</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>equal<sp/>to<sp/>the<sp/>specified<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><ref refid="tree__common_8h_1a834572fa63706dc9a9cfa4267e07eb08" kindref="member">tree_search_le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1acf04110b9a2494c4ea91b5f960478e9e" kindref="member">tree_search_le_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>data/node<sp/>associated<sp/>with<sp/>the<sp/>first<sp/>key<sp/>less<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>specified<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><ref refid="tree__common_8h_1a1fc9e462ca58e9d12d81e9e1f77e640d" kindref="member">tree_search_lt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1ac2b03ab7859c7c7c48f32b7b8d40a4bf" kindref="member">tree_search_lt_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>data/node<sp/>associated<sp/>with<sp/>the<sp/>first<sp/>key<sp/>greater<sp/>than<sp/>or</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>equal<sp/>to<sp/>the<sp/>specified<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><ref refid="tree__common_8h_1af6ed3a63a9c60907953d2746a3a1b8fb" kindref="member">tree_search_ge</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1a7ef6f4a68ff6cba269988aeba2a66a33" kindref="member">tree_search_ge_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>data/node<sp/>associated<sp/>with<sp/>the<sp/>first<sp/>key<sp/>greater<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>specified<sp/>key,<sp/>or<sp/>NULL<sp/>if<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><ref refid="tree__common_8h_1a8b3a3c169d964c62302581f5d85ac004" kindref="member">tree_search_gt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><ref refid="tree__common_8h_1a68a8285626f8ca19aa5028d8db8c1c97" kindref="member">tree_search_gt_node</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traverses<sp/>the<sp/>tree<sp/>in<sp/>order,<sp/>calling<sp/>|visit|<sp/>with<sp/>each<sp/>key<sp/>and<sp/>value<sp/>pair,</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>stopping<sp/>if<sp/>|visit|<sp/>returns<sp/>false.<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>times<sp/>|visit|<sp/>was</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1a62fef1416dee2635ca075d5d9a519c34" kindref="member">tree_traverse</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1aebbefe3aa81b20e1254e8a7a5253caf6" kindref="member">dict_visit_func</ref><sp/>visit,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Put<sp/>the<sp/>key<sp/>and<sp/>datum<sp/>of<sp/>the<sp/>|n|th<sp/>element<sp/>of<sp/>|tree|<sp/>into<sp/>|key|<sp/>and<sp/>|datum|</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>and<sp/>return<sp/>true,<sp/>or,<sp/>if<sp/>n<sp/>is<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>elements,</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>return<sp/>false.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ac144b757fd8ecdeab9e1ae4d31dd92e2" kindref="member">tree_select</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**datum);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>a<sp/>count<sp/>of<sp/>the<sp/>elements<sp/>in<sp/>|tree|.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1ad7192e6cc9305bd387a2de989dbe0c54" kindref="member">tree_count</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove<sp/>all<sp/>elements<sp/>from<sp/>|tree|.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1a883af43dc54a56d18fd30bee2104ba85" kindref="member">tree_clear</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Remove<sp/>all<sp/>elements<sp/>from<sp/>|tree|<sp/>and<sp/>free<sp/>its<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1a29602ed18f6d0a7db2b9c37d6fa0368b" kindref="member">tree_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>,<sp/><ref refid="dict_8h_1a5301c8938ac34a1c9f18078bc6464385" kindref="member">dict_delete_func</ref><sp/>delete_func);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>depth<sp/>of<sp/>the<sp/>leaf<sp/>with<sp/>minimal<sp/>depth,<sp/>or<sp/>0<sp/>for<sp/>an<sp/>empty<sp/>tree.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1a2afc6479b48b15341653535d1c09b23f" kindref="member">tree_min_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>depth<sp/>of<sp/>the<sp/>leaf<sp/>with<sp/>maximal<sp/>depth,<sp/>or<sp/>0<sp/>for<sp/>an<sp/>empty<sp/>tree.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1a70efe1dab1d7e921660d1df4dfbbdd03" kindref="member">tree_max_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>total<sp/>path<sp/>length<sp/>of<sp/>the<sp/>tree.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="tree__common_8h_1ad8bd4c384ca20067d07d7ac261a670ec" kindref="member">tree_total_path_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structtree" kindref="compound">tree</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a007c77730e99ae192e34ba18399f0456" kindref="member">tree_iterator_valid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ad3ee7c4e1533726f211e78e559ce5398" kindref="member">tree_iterator_invalidate</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a25e867d4c0d4447e6c0b0838aa311e55" kindref="member">tree_iterator_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a43963be9eade744b2d3a77914e4e20a5" kindref="member">tree_iterator_next</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a56eed6b63ed322aa656ba02e845a2caf" kindref="member">tree_iterator_prev</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a4e54c33bf8c8429421ef698f049ff46c" kindref="member">tree_iterator_nextn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8be1329ad6b7d656cc29bcca4e8e3b95" kindref="member">tree_iterator_prevn</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a76a5215d5dad8de31b36ad11350770f8" kindref="member">tree_iterator_first</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab9329d4cf4317f2ddd9f46f967bb1d3c" kindref="member">tree_iterator_last</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ae475a957640b2a7fda1c7a803590a55a" kindref="member">tree_iterator_search</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1aca4d6919c69c59b77effed9746350ccf" kindref="member">tree_iterator_search_le</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1acd2643e69cd70b24ab68157c88d89150" kindref="member">tree_iterator_search_lt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a8731f9d60ea044a8b79ed90fe1b25a57" kindref="member">tree_iterator_search_ge</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1ab419689d410592ac34ff9b00b7977096" kindref="member">tree_iterator_search_gt</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1abf1de1d71e92df79cd1b0cee24465c27" kindref="member">tree_iterator_compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>iterator1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>iterator2);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="tree__common_8h_1aaa46faf126d94dfa7dd33fe9db363f2b" kindref="member">tree_iterator_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tree__common_8h_1a192415adccccf2fd72ed144ffec4cac6" kindref="member">tree_iterator_datum</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*iterator);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!LIBDICT_TREE_COMMON_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="src/tree_common.h"/>
  </compounddef>
</doxygen>
